package analizadorlexico;
import java_cup.runtime.*;

parser code {:
  public void report_error(String message,Object info){
        System.out.println(message);
        System.out.println(info);
  }
    protected int error_sync_size () {
      System.out.println(":error_sync_size was called.");
      return 1;
    }
    public void syntax_error(Symbol cur_token){
        System.out.println("Token Value " + cur_token.value);
        System.out.println("Sym " + cur_token.sym);
        System.out.println("Line " + cur_token.left);
        report_error("Syntax error", null);
    }
:}

/*TERMINAL (FLEX)*/
terminal PROCEDURE, IS, BEGIN, END, PUT, NEW_LINE, WITH, OPEN_PARENTHESIS;
terminal CLOSE_PARENTHESIS, SUM_OPERATOR, MULT_OPERATOR, RELATION_OPERATOR;
terminal TYPE, LITERAL_BOOLEAN, LITERAL_INT, END_INSTRUCTION, LITERAL_CHAR;
terminal IF,ELSE,ELSEIF,THEN,FOR,IN,OUT,LOOP,WHILE,ID,ASIGNATION;
terminal DECLARATION, EXIT, WHEN, COMMA, LITERAL_STRING,CONDITION_ELEMENT;
terminal CONSTANT,FUNCTION,PACKAGE,BODY,RETURN,NULL,CASE,CASEASIG;
terminal REVERSE,OTHERS,TO;

/*NON TERMINAL*/
non terminal procedure,asignation,statement,function_call;
non terminal list_primary,primary,declaration,simple_expression;
non terminal constant,parameters,mathematical_expression,mult_operation, parenthesis_operation;

non terminal list_declaration_parameters,in_out_declaration,if,if_a,case,case_a,while,for;
non terminal input_parameters,simple_declaration,body_declaration;
non terminal condition,expression, function_call_statement,condition_expression, relation_expression;


/*PRECEDENCE*/
precedence left CONDITION_ELEMENT;
precedence left RELATION_OPERATOR;
precedence left SUM_OPERATOR;
precedence left MULT_OPERATOR;


/* GRAMMARS */
procedure ::= PROCEDURE ID body_declaration END_INSTRUCTION
          |;
declaration ::= simple_declaration END_INSTRUCTION declaration
          | PROCEDURE ID input_parameters body_declaration END_INSTRUCTION declaration
          | FUNCTION ID input_parameters RETURN TYPE body_declaration END_INSTRUCTION declaration
          | ;
input_parameters ::= OPEN_PARENTHESIS list_declaration_parameters CLOSE_PARENTHESIS
                      |;
list_declaration_parameters ::= simple_declaration list_declaration_parameters
                      | in_out_declaration list_declaration_parameters
                      | simple_declaration
                      | in_out_declaration;
in_out_declaration ::= ID DECLARATION IN TYPE
                  | ID DECLARATION OUT TYPE
                  | ID DECLARATION IN OUT TYPE;
simple_declaration ::= ID DECLARATION constant TYPE
                    | ID COMMA simple_declaration
                    | ID DECLARATION constant TYPE ASIGNATION expression END_INSTRUCTION;
body_declaration ::= IS declaration BEGIN statement END ID;
constant ::= CONSTANT
          |;
statement ::= asignation END_INSTRUCTION statement
          |   NEW_LINE END_INSTRUCTION statement
          |   if END_INSTRUCTION statement
          |   case END_INSTRUCTION statement
          |   while END_INSTRUCTION statement
          |   for END_INSTRUCTION statement
          |   RETURN expression END_INSTRUCTION statement
          |   function_call_statement statement
          |;
function_call_statement ::= function_call END_INSTRUCTION;
condition ::= expression;
simple_expression ::= ;
mathematical_expression ::= mathematical_expression SUM_OPERATOR mult_operation
          | mult_operation;
mult_operation ::= mult_operation MULT_OPERATOR parenthesis_operation
          | parenthesis_operation;
parenthesis_operation ::= OPEN_PARENTHESIS mathematical_expression CLOSE_PARENTHESIS
          | LITERAL_INT
          | ID
          | function_call;
expression ::= relation_expression
          | condition_expression
          | mathematical_expression;

relation_expression ::= expression RELATION_OPERATOR expression;
condition_expression ::= expression CONDITION_ELEMENT expression
                    |   OPEN_PARENTHESIS condition_expression CLOSE_PARENTHESIS;

primary  ::= LITERAL_BOOLEAN
          |   LITERAL_INT
          |   LITERAL_STRING
          |   ID
          |   function_call;
asignation   ::= ID ASIGNATION expression;
list_primary ::= primary COMMA list_primary
            | primary;
parameters ::= list_primary
          |;

if  ::= IF condition THEN statement if_a END IF;
if_a ::= ELSEIF condition THEN statement if_a
        | ELSE statement
        |;

case  ::= CASE primary IS case_a END CASE;
case_a ::= WHEN primary CASEASIG statement case_a
          |;

while ::= WHILE condition LOOP statement END LOOP;

for   ::= FOR asignation TO expression statement END FOR;

function_call ::= ID OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS
              |   PUT OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS;
