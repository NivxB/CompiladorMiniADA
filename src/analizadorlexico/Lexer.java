/* The following code was generated by JFlex 1.6.1 */

package analizadorlexico;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>./src/analizadorlexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\51\1\54\1\55\1\51\1\51\22\0\1\52\11\0\1\36"+
    "\1\34\1\0\1\35\1\0\1\37\12\50\1\42\1\43\1\40\1\41"+
    "\1\40\2\0\1\32\1\33\2\44\1\25\1\30\1\26\1\44\1\23"+
    "\2\44\1\22\1\44\1\17\1\31\1\15\1\44\1\27\1\44\1\24"+
    "\6\44\4\0\1\21\1\0\1\46\1\12\1\4\1\6\1\5\1\45"+
    "\1\13\1\53\1\10\2\44\1\47\1\44\1\14\1\3\1\1\1\44"+
    "\1\2\1\11\1\16\1\7\1\44\1\20\3\44\12\0\1\55\u1fa2\0"+
    "\1\55\1\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\13\2\2\3\2\4\2\5\1\6\1\7"+
    "\1\2\1\10\1\11\1\12\1\13\1\2\4\0\1\2"+
    "\1\14\10\2\1\15\1\16\2\2\1\17\1\20\1\2"+
    "\1\0\1\2\1\21\7\2\3\17\1\2\1\0\1\2"+
    "\1\22\5\2\2\17\2\0\1\2\1\0\1\23\2\2"+
    "\1\24\2\2\4\17\2\0\1\2\1\0\4\2\3\0"+
    "\3\17\3\0\1\2\2\0\2\2\2\17\3\0\2\2"+
    "\1\0\1\25\1\26\2\17\1\0\2\2\2\0\2\17"+
    "\1\0\1\2\2\0\3\17\1\0\2\2\3\0\2\17"+
    "\1\27\1\2\3\0\1\2\2\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\2\0\1\2\1\0\1\2"+
    "\1\0\1\2\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\56\0\212\0\270\0\346\0\u0114"+
    "\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\56"+
    "\0\u0284\0\56\0\u02b2\0\u02b2\0\56\0\u02e0\0\56\0\u030e"+
    "\0\u033c\0\56\0\56\0\56\0\u036a\0\u0398\0\u03c6\0\u03f4"+
    "\0\u0422\0\u0450\0\270\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536"+
    "\0\u0564\0\u0592\0\u05c0\0\56\0\56\0\u05ee\0\u061c\0\u064a"+
    "\0\270\0\u0678\0\u06a6\0\u06d4\0\270\0\u0702\0\u0730\0\u075e"+
    "\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce"+
    "\0\u08fc\0\u092a\0\270\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10"+
    "\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\270\0\u0b52"+
    "\0\u0b80\0\270\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94"+
    "\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04"+
    "\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74"+
    "\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4"+
    "\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\270\0\270"+
    "\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368"+
    "\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8"+
    "\0\u1506\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648"+
    "\0\56\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a"+
    "\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa"+
    "\0\u1928\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\3\6\1\7\2\6\1\10\1\6\1\11"+
    "\2\6\1\12\1\13\1\14\1\6\1\4\1\6\1\15"+
    "\4\6\1\16\2\6\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\6\1\30\2\6\1\31"+
    "\2\32\1\6\1\32\57\0\51\33\2\32\1\33\1\34"+
    "\2\0\1\6\1\35\31\6\1\0\1\6\1\0\1\36"+
    "\1\37\1\40\2\0\5\6\2\41\1\6\1\41\2\0"+
    "\33\6\1\0\1\6\1\0\1\36\1\37\1\40\2\0"+
    "\5\6\2\41\1\6\1\41\2\0\13\6\1\42\17\6"+
    "\1\0\1\6\1\0\1\36\1\37\1\40\2\0\5\6"+
    "\2\41\1\6\1\41\2\0\10\6\1\43\22\6\1\0"+
    "\1\6\1\0\1\36\1\37\1\40\2\0\1\6\1\44"+
    "\3\6\2\41\1\6\1\41\2\0\4\6\1\45\26\6"+
    "\1\0\1\6\1\0\1\36\1\37\1\40\2\0\5\6"+
    "\2\41\1\6\1\41\2\0\6\6\1\46\24\6\1\0"+
    "\1\6\1\0\1\36\1\37\1\40\2\0\5\6\2\41"+
    "\1\6\1\41\2\0\1\6\1\47\31\6\1\0\1\6"+
    "\1\0\1\36\1\37\1\40\2\0\5\6\2\41\1\6"+
    "\1\41\2\0\4\6\1\50\26\6\1\0\1\6\1\0"+
    "\1\36\1\37\1\40\2\0\5\6\2\41\1\6\1\41"+
    "\2\0\16\6\1\51\14\6\1\0\1\6\1\0\1\36"+
    "\1\37\1\40\2\0\5\6\2\41\1\6\1\41\2\0"+
    "\21\6\1\52\11\6\1\0\1\6\1\0\1\36\1\37"+
    "\1\40\2\0\5\6\2\41\1\6\1\41\2\0\30\6"+
    "\1\53\2\6\1\0\1\6\1\0\1\36\1\37\1\40"+
    "\2\0\5\6\2\41\1\6\1\41\36\0\1\54\61\0"+
    "\1\25\55\0\1\55\15\0\33\6\1\0\1\6\1\0"+
    "\1\36\1\37\1\40\2\0\2\6\1\56\2\6\2\41"+
    "\1\6\1\41\51\0\1\31\6\0\2\6\1\57\30\6"+
    "\1\0\1\6\1\0\1\36\1\37\1\40\2\0\5\6"+
    "\2\41\1\6\1\41\42\0\1\40\15\0\20\60\1\0"+
    "\12\60\5\0\1\40\2\0\4\60\1\0\2\40\1\60"+
    "\1\40\2\0\20\60\1\0\12\60\10\0\4\60\1\0"+
    "\2\40\1\60\1\40\40\0\1\36\1\37\1\40\7\0"+
    "\2\41\1\0\1\41\2\0\5\6\1\61\25\6\1\0"+
    "\1\6\1\0\1\36\1\37\1\40\2\0\5\6\2\41"+
    "\1\6\1\41\2\0\15\6\1\62\15\6\1\0\1\6"+
    "\1\0\1\36\1\37\1\40\2\0\5\6\2\63\1\6"+
    "\1\63\2\0\12\6\1\64\20\6\1\0\1\6\1\0"+
    "\1\36\1\37\1\40\2\0\5\6\2\41\1\6\1\41"+
    "\2\0\15\6\1\65\15\6\1\0\1\6\1\0\1\36"+
    "\1\37\1\40\2\0\5\6\2\41\1\6\1\41\2\0"+
    "\6\6\1\66\24\6\1\0\1\6\1\0\1\36\1\37"+
    "\1\40\2\0\5\6\2\41\1\6\1\41\2\0\17\6"+
    "\1\67\13\6\1\0\1\6\1\0\1\36\1\37\1\40"+
    "\2\0\5\6\2\41\1\6\1\41\2\0\23\6\1\70"+
    "\7\6\1\0\1\6\1\0\1\36\1\37\1\40\2\0"+
    "\5\6\2\41\1\6\1\41\2\0\30\6\1\71\2\6"+
    "\1\0\1\6\1\0\1\36\1\37\1\40\2\0\5\6"+
    "\2\41\1\6\1\41\2\0\30\6\1\72\2\6\1\0"+
    "\1\6\1\0\1\36\1\37\1\40\2\0\5\6\2\41"+
    "\1\6\1\41\2\0\33\6\1\0\1\6\1\0\1\36"+
    "\1\37\1\40\2\0\3\6\1\73\1\6\2\41\1\6"+
    "\1\41\2\0\3\6\1\74\27\6\1\0\1\6\1\0"+
    "\1\36\1\37\1\40\2\0\5\6\2\41\1\6\1\41"+
    "\2\0\2\60\1\75\30\60\1\0\1\60\6\0\2\60"+
    "\1\76\2\60\2\77\1\60\1\77\2\0\33\6\1\0"+
    "\1\6\1\0\1\36\1\37\1\40\2\0\5\6\2\41"+
    "\1\100\1\41\17\0\1\101\20\0\1\36\1\37\1\40"+
    "\7\0\2\63\1\0\1\63\2\0\7\6\1\102\23\6"+
    "\1\0\1\6\1\0\1\36\1\37\1\40\2\0\5\6"+
    "\2\41\1\6\1\41\2\0\4\6\1\103\26\6\1\0"+
    "\1\6\1\0\1\36\1\37\1\40\2\0\5\6\2\41"+
    "\1\6\1\41\2\0\20\6\1\104\12\6\1\0\1\6"+
    "\1\0\1\36\1\37\1\40\2\0\5\6\2\41\1\6"+
    "\1\41\2\0\24\6\1\105\6\6\1\0\1\6\1\0"+
    "\1\36\1\37\1\40\2\0\5\6\2\41\1\6\1\41"+
    "\2\0\31\6\1\106\1\6\1\0\1\6\1\0\1\36"+
    "\1\37\1\40\2\0\5\6\2\41\1\6\1\41\2\0"+
    "\21\6\1\107\11\6\1\0\1\6\1\0\1\36\1\37"+
    "\1\40\2\0\5\6\2\41\1\6\1\41\2\0\10\6"+
    "\1\66\22\6\1\0\1\6\1\0\1\36\1\37\1\40"+
    "\2\0\5\6\2\41\1\6\1\41\2\0\4\6\1\110"+
    "\26\6\1\0\1\6\1\0\1\36\1\37\1\40\2\0"+
    "\5\6\2\41\1\6\1\41\2\0\1\60\1\111\1\75"+
    "\30\60\1\0\1\60\6\0\2\60\1\76\2\60\2\77"+
    "\1\60\1\77\2\0\2\60\1\75\10\60\1\112\17\60"+
    "\1\0\1\60\6\0\2\60\1\76\2\60\2\77\1\60"+
    "\1\77\4\0\1\113\42\0\1\114\2\0\2\77\1\0"+
    "\1\77\2\0\4\6\1\115\26\6\1\0\1\6\1\0"+
    "\1\36\1\37\1\40\2\0\5\6\2\41\1\6\1\41"+
    "\54\0\1\116\3\0\13\6\1\117\17\6\1\0\1\6"+
    "\1\0\1\36\1\37\1\40\2\0\5\6\2\41\1\6"+
    "\1\41\2\0\21\6\1\120\11\6\1\0\1\6\1\0"+
    "\1\36\1\37\1\40\2\0\5\6\2\41\1\6\1\41"+
    "\2\0\25\6\1\121\5\6\1\0\1\6\1\0\1\36"+
    "\1\37\1\40\2\0\5\6\2\41\1\6\1\41\2\0"+
    "\23\6\1\122\7\6\1\0\1\6\1\0\1\36\1\37"+
    "\1\40\2\0\5\6\2\41\1\6\1\41\2\0\24\6"+
    "\1\123\6\6\1\0\1\6\1\0\1\36\1\37\1\40"+
    "\2\0\5\6\2\41\1\6\1\41\2\0\5\6\1\124"+
    "\25\6\1\0\1\6\1\0\1\36\1\37\1\40\2\0"+
    "\5\6\2\41\1\6\1\41\2\0\2\125\1\126\15\125"+
    "\1\60\12\125\1\0\1\60\6\0\2\125\1\127\1\125"+
    "\1\60\2\130\1\125\1\130\2\0\2\60\1\75\2\60"+
    "\1\111\25\60\1\0\1\60\6\0\2\60\1\76\2\60"+
    "\2\77\1\60\1\77\3\0\1\131\67\0\1\132\42\0"+
    "\13\6\1\133\17\6\1\0\1\6\1\0\1\36\1\37"+
    "\1\40\2\0\5\6\2\41\1\6\1\41\6\0\1\134"+
    "\51\0\7\6\1\135\23\6\1\0\1\6\1\0\1\36"+
    "\1\37\1\40\2\0\5\6\2\41\1\6\1\41\2\0"+
    "\24\6\1\136\6\6\1\0\1\6\1\0\1\36\1\37"+
    "\1\40\2\0\5\6\2\41\1\6\1\41\2\0\31\6"+
    "\1\137\1\6\1\0\1\6\1\0\1\36\1\37\1\40"+
    "\2\0\5\6\2\41\1\6\1\41\2\0\6\6\1\140"+
    "\24\6\1\0\1\6\1\0\1\36\1\37\1\40\2\0"+
    "\5\6\2\41\1\6\1\41\2\0\2\125\1\126\30\125"+
    "\1\0\1\125\1\0\1\141\1\142\1\143\2\0\2\125"+
    "\1\127\2\125\2\144\1\125\1\144\2\0\1\125\1\145"+
    "\1\126\30\125\1\0\1\125\1\0\1\141\1\142\1\143"+
    "\2\0\2\125\1\127\2\125\2\144\1\125\1\144\2\0"+
    "\2\125\1\126\10\125\1\146\17\125\1\0\1\125\1\0"+
    "\1\141\1\142\1\143\2\0\2\125\1\127\2\125\2\144"+
    "\1\125\1\144\2\0\2\147\1\150\15\147\1\0\12\147"+
    "\10\0\2\147\1\151\1\147\1\0\2\130\1\147\1\130"+
    "\2\0\20\147\1\0\12\147\10\0\4\147\1\0\2\131"+
    "\1\147\1\131\7\0\1\131\50\0\4\6\1\152\26\6"+
    "\1\0\1\6\1\0\1\36\1\37\1\40\2\0\5\6"+
    "\2\153\1\6\1\153\15\0\1\154\42\0\13\6\1\155"+
    "\17\6\1\0\1\6\1\0\1\36\1\37\1\40\2\0"+
    "\5\6\2\41\1\6\1\41\2\0\26\6\1\122\4\6"+
    "\1\0\1\6\1\0\1\36\1\37\1\40\2\0\5\6"+
    "\2\41\1\6\1\41\2\0\16\6\1\122\14\6\1\0"+
    "\1\6\1\0\1\36\1\37\1\40\2\0\5\6\2\41"+
    "\1\6\1\41\2\0\1\6\1\156\31\6\1\0\1\6"+
    "\1\0\1\36\1\37\1\40\2\0\5\6\2\41\1\6"+
    "\1\41\42\0\1\143\15\0\20\157\1\0\12\157\5\0"+
    "\1\143\2\0\4\157\1\0\2\143\1\157\1\143\2\0"+
    "\20\157\1\0\12\157\10\0\4\157\1\0\2\143\1\157"+
    "\1\143\4\0\1\113\33\0\1\141\1\142\1\143\4\0"+
    "\1\114\2\0\2\144\1\0\1\144\2\0\2\125\1\126"+
    "\30\125\1\0\1\125\1\0\1\141\1\142\1\143\2\0"+
    "\2\125\1\127\2\125\2\160\1\125\1\160\2\0\2\125"+
    "\1\126\2\125\1\145\25\125\1\0\1\125\1\0\1\141"+
    "\1\142\1\143\2\0\2\125\1\127\2\125\2\144\1\125"+
    "\1\144\2\0\33\147\1\0\1\147\1\0\1\141\1\142"+
    "\1\143\2\0\5\147\2\161\1\147\1\161\2\0\1\147"+
    "\1\162\31\147\1\0\1\147\1\0\1\141\1\142\1\143"+
    "\2\0\5\147\2\161\1\147\1\161\2\0\13\147\1\163"+
    "\17\147\1\0\1\147\1\0\1\141\1\142\1\143\2\0"+
    "\5\147\2\161\1\147\1\161\2\0\13\6\1\164\17\6"+
    "\1\0\1\6\1\0\1\36\1\37\1\40\2\0\3\6"+
    "\1\165\1\6\2\41\1\6\1\41\6\0\1\166\31\0"+
    "\1\36\1\37\1\40\7\0\2\153\1\0\1\153\6\0"+
    "\1\166\43\0\2\154\1\0\1\154\2\0\4\6\1\167"+
    "\26\6\1\0\1\6\1\0\1\36\1\37\1\40\2\0"+
    "\5\6\2\41\1\6\1\41\2\0\4\6\1\170\26\6"+
    "\1\0\1\6\1\0\1\36\1\37\1\40\2\0\5\6"+
    "\2\41\1\6\1\41\2\0\2\157\1\171\30\157\1\0"+
    "\1\157\6\0\2\157\1\172\2\157\2\0\1\157\3\0"+
    "\2\147\1\150\15\147\1\0\12\147\3\0\1\141\1\142"+
    "\1\143\2\0\2\147\1\151\1\147\1\0\2\160\1\147"+
    "\1\160\40\0\1\141\1\142\1\143\7\0\2\161\1\0"+
    "\1\161\2\0\33\147\1\0\1\147\1\0\1\141\1\142"+
    "\1\143\2\0\5\147\2\173\1\147\1\173\2\0\5\147"+
    "\1\162\25\147\1\0\1\147\1\0\1\141\1\142\1\143"+
    "\2\0\5\147\2\161\1\147\1\161\2\0\5\6\1\174"+
    "\25\6\1\0\1\6\1\0\1\36\1\37\1\40\2\0"+
    "\5\6\2\41\1\6\1\41\2\0\10\6\1\175\22\6"+
    "\1\0\1\6\1\0\1\36\1\37\1\40\2\0\5\6"+
    "\2\41\1\6\1\41\15\0\1\176\32\0\1\177\7\0"+
    "\1\157\1\200\1\171\30\157\1\0\1\157\6\0\2\157"+
    "\1\172\2\157\2\0\1\157\3\0\2\157\1\171\10\157"+
    "\1\201\17\157\1\0\1\157\6\0\2\157\1\172\2\157"+
    "\2\0\1\157\3\0\20\147\1\0\12\147\3\0\1\141"+
    "\1\142\1\143\2\0\4\147\1\0\2\173\1\147\1\173"+
    "\2\0\33\6\1\0\1\6\1\0\1\36\1\37\1\40"+
    "\2\0\5\6\1\41\1\202\1\6\1\41\2\0\4\6"+
    "\1\203\26\6\1\0\1\6\1\0\1\36\1\37\1\40"+
    "\2\0\5\6\2\41\1\6\1\41\7\0\1\204\60\0"+
    "\1\205\45\0\2\206\1\207\15\206\1\157\12\206\1\0"+
    "\1\157\6\0\2\206\1\210\1\206\1\157\2\131\1\206"+
    "\1\131\2\0\2\157\1\171\2\157\1\200\25\157\1\0"+
    "\1\157\6\0\2\157\1\172\2\157\2\0\1\157\12\0"+
    "\1\211\26\0\1\36\1\37\1\40\7\0\2\41\1\0"+
    "\1\41\2\0\4\6\1\212\2\6\1\213\23\6\1\0"+
    "\1\6\1\0\1\36\1\37\1\40\2\0\5\6\2\214"+
    "\1\6\1\214\53\0\1\215\10\0\1\216\51\0\2\206"+
    "\1\207\30\206\1\0\1\206\1\0\1\141\1\142\1\143"+
    "\2\0\2\206\1\210\2\206\2\161\1\206\1\161\2\0"+
    "\1\206\1\217\1\207\30\206\1\0\1\206\1\0\1\141"+
    "\1\142\1\143\2\0\2\206\1\210\2\206\2\161\1\206"+
    "\1\161\2\0\2\206\1\207\10\206\1\220\17\206\1\0"+
    "\1\206\1\0\1\141\1\142\1\143\2\0\2\206\1\210"+
    "\2\206\2\161\1\206\1\161\46\0\1\221\11\0\13\6"+
    "\1\164\17\6\1\0\1\6\1\0\1\36\1\37\1\40"+
    "\2\0\5\6\2\41\1\6\1\41\2\0\33\6\1\0"+
    "\1\6\1\0\1\36\1\37\1\40\2\0\1\6\1\222"+
    "\3\6\2\41\1\6\1\41\6\0\1\223\31\0\1\36"+
    "\1\37\1\40\7\0\2\214\1\0\1\214\11\0\1\211"+
    "\52\0\1\223\2\0\1\224\40\0\2\225\1\0\1\225"+
    "\2\0\2\206\1\207\30\206\1\0\1\206\1\0\1\141"+
    "\1\142\1\143\2\0\2\206\1\210\2\206\2\173\1\206"+
    "\1\173\2\0\2\206\1\207\2\206\1\217\25\206\1\0"+
    "\1\206\1\0\1\141\1\142\1\143\2\0\2\206\1\210"+
    "\2\206\2\161\1\206\1\161\2\0\15\6\1\226\15\6"+
    "\1\0\1\6\1\0\1\36\1\37\1\40\2\0\5\6"+
    "\2\227\1\6\1\227\15\0\1\176\106\0\1\230\15\0"+
    "\1\223\43\0\2\225\1\0\1\225\2\0\33\6\1\0"+
    "\1\6\1\0\1\36\1\37\1\40\2\0\5\6\2\41"+
    "\1\231\1\41\17\0\1\232\20\0\1\36\1\37\1\40"+
    "\7\0\2\227\1\0\1\227\17\0\1\232\32\0\2\230"+
    "\1\0\1\230\2\0\4\6\1\233\26\6\1\0\1\6"+
    "\1\0\1\36\1\37\1\40\2\0\5\6\2\41\1\6"+
    "\1\41\54\0\1\234\3\0\13\6\1\235\17\6\1\0"+
    "\1\6\1\0\1\36\1\37\1\40\2\0\5\6\2\41"+
    "\1\6\1\41\6\0\1\236\51\0\4\6\1\237\26\6"+
    "\1\0\1\6\1\0\1\36\1\37\1\40\2\0\5\6"+
    "\2\240\1\6\1\240\15\0\1\241\42\0\13\6\1\164"+
    "\17\6\1\0\1\6\1\0\1\36\1\37\1\40\2\0"+
    "\3\6\1\242\1\6\2\41\1\6\1\41\6\0\1\243"+
    "\31\0\1\36\1\37\1\40\7\0\2\240\1\0\1\240"+
    "\6\0\1\243\43\0\2\241\1\0\1\241\2\0\10\6"+
    "\1\244\22\6\1\0\1\6\1\0\1\36\1\37\1\40"+
    "\2\0\5\6\2\41\1\6\1\41\15\0\1\176\32\0"+
    "\1\245\7\0\4\6\1\246\26\6\1\0\1\6\1\0"+
    "\1\36\1\37\1\40\2\0\5\6\2\41\1\6\1\41"+
    "\12\0\1\247\45\0\7\6\1\213\23\6\1\0\1\6"+
    "\1\0\1\36\1\37\1\40\2\0\5\6\2\41\1\6"+
    "\1\41\6\0\1\250\60\0\1\224\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6808];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\1\0\1\11\13\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\2\1\3\11\1\1\4\0"+
    "\12\1\2\11\5\1\1\0\15\1\1\0\11\1\2\0"+
    "\1\1\1\0\12\1\2\0\1\1\1\0\4\1\3\0"+
    "\3\1\3\0\1\1\2\0\4\1\3\0\2\1\1\0"+
    "\4\1\1\0\2\1\2\0\2\1\1\0\1\1\2\0"+
    "\3\1\1\0\2\1\3\0\2\1\1\11\1\1\3\0"+
    "\1\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1\1\0\1\1\1\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
     StringBuffer string = new StringBuffer();

     private Symbol symbol(int type) {
       return new Symbol(type, yyline, yycolumn);
      }
      private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
      }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return symbol(Symbol.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(-1,yytext());
            }
          case 24: break;
          case 2: 
            { return symbol(Symbol.ID,yytext());
            }
          case 25: break;
          case 3: 
            { return symbol(Symbol.SUM_OPERATOR,yytext());
            }
          case 26: break;
          case 4: 
            { return symbol(Symbol.MULT_OPERATOR,yytext());
            }
          case 27: break;
          case 5: 
            { return symbol(Symbol.RELATION_OPERATOR,yytext());
            }
          case 28: break;
          case 6: 
            { return symbol(Symbol.DECLARATION);
            }
          case 29: break;
          case 7: 
            { return symbol(Symbol.END_INSTRUCTION);
            }
          case 30: break;
          case 8: 
            { return symbol(Symbol.LITERAL_INT,yytext());
            }
          case 31: break;
          case 9: 
            { /* ignore */
            }
          case 32: break;
          case 10: 
            { /* Ignore */
            }
          case 33: break;
          case 11: 
            { yybegin(YYINITIAL);
            }
          case 34: break;
          case 12: 
            { return symbol(Symbol.IS);
            }
          case 35: break;
          case 13: 
            { yybegin(COMMENT);
            }
          case 36: break;
          case 14: 
            { return symbol(Symbol.ASIGNATION);
            }
          case 37: break;
          case 15: 
            { return symbol(Symbol.CONDITION);
            }
          case 38: break;
          case 16: 
            { return symbol(Symbol.END);
            }
          case 39: break;
          case 17: 
            { return symbol(Symbol.PUT);
            }
          case 40: break;
          case 18: 
            { return symbol(Symbol.LITERAL_BOOLEAN,yytext());
            }
          case 41: break;
          case 19: 
            { return symbol(Symbol.BEGIN);
            }
          case 42: break;
          case 20: 
            { return symbol(Symbol.TYPE,yytext());
            }
          case 43: break;
          case 21: 
            { return symbol(Symbol.NEW_LINE);
            }
          case 44: break;
          case 22: 
            { return symbol(Symbol.PROCEDURE);
            }
          case 45: break;
          case 23: 
            { return symbol(Symbol.IF);
            }
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
