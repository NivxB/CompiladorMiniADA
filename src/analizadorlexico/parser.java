
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 20 21:27:33 CST 2016
//----------------------------------------------------

package analizadorlexico;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 20 21:27:33 CST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\006\000\002\002\004\000\002\002" +
    "\002\000\002\010\005\000\002\010\010\000\002\010\012" +
    "\000\002\010\002\000\002\027\005\000\002\027\002\000" +
    "\002\017\004\000\002\017\004\000\002\017\003\000\002" +
    "\017\003\000\002\020\006\000\002\020\006\000\002\020" +
    "\007\000\002\030\006\000\002\030\005\000\002\030\011" +
    "\000\002\031\010\000\002\012\003\000\002\012\002\000" +
    "\002\004\004\000\002\004\003\000\002\037\004\000\002" +
    "\037\004\000\002\037\004\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\037\005\000\002\037\003" +
    "\000\002\034\004\000\002\032\003\000\002\011\002\000" +
    "\002\014\005\000\002\014\003\000\002\015\005\000\002" +
    "\015\003\000\002\016\005\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\036\005\000\002\035\005\000" +
    "\002\035\005\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\003\000" +
    "\002\006\005\000\002\006\003\000\002\013\003\000\002" +
    "\013\002\000\002\021\011\000\002\022\007\000\002\022" +
    "\004\000\002\022\002\000\002\023\010\000\002\024\007" +
    "\000\002\024\002\000\002\025\010\000\002\026\011\000" +
    "\002\005\006\000\002\005\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\006\002\uffff\004\004\001\002\000\004\036" +
    "\007\001\002\000\004\002\006\001\002\000\004\002\000" +
    "\001\002\000\004\005\010\001\002\000\012\004\015\006" +
    "\ufffb\036\014\047\016\001\002\000\004\023\012\001\002" +
    "\000\004\002\001\001\002\000\004\023\245\001\002\000" +
    "\006\040\244\043\212\001\002\000\004\036\237\001\002" +
    "\000\004\036\201\001\002\000\004\006\020\001\002\000" +
    "\024\003\036\010\031\011\032\025\026\031\040\035\023" +
    "\036\030\052\024\054\035\001\002\000\034\003\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\025\uffe2\026\uffe2\027\uffe2\031\uffe2" +
    "\035\uffe2\036\uffe2\042\uffe2\052\uffe2\054\uffe2\001\002\000" +
    "\004\007\177\001\002\000\012\010\031\013\061\022\051" +
    "\036\056\001\002\000\012\010\031\013\061\022\051\036" +
    "\056\001\002\000\004\023\167\001\002\000\012\010\031" +
    "\013\061\022\051\036\056\001\002\000\004\023\150\001" +
    "\002\000\006\013\101\037\120\001\002\000\004\013\145" +
    "\001\002\000\004\023\144\001\002\000\004\023\143\001" +
    "\002\000\004\023\142\001\002\000\014\010\031\021\104" +
    "\022\102\036\107\044\106\001\002\000\022\010\031\013" +
    "\061\021\125\022\051\023\uffc5\036\056\044\126\060\uffc5" +
    "\001\002\000\004\023\124\001\002\000\006\003\036\036" +
    "\045\001\002\000\034\003\036\007\uffea\010\031\011\032" +
    "\025\026\026\uffea\027\uffea\031\040\035\023\036\030\042" +
    "\uffea\052\024\054\035\001\002\000\004\023\043\001\002" +
    "\000\034\003\uffe9\007\uffe9\010\uffe9\011\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\031\uffe9\035\uffe9\036\uffe9\042\uffe9\052\uffe9" +
    "\054\uffe9\001\002\000\012\007\uffeb\026\uffeb\027\uffeb\042" +
    "\uffeb\001\002\000\004\037\120\001\002\000\004\060\047" +
    "\001\002\000\012\010\031\013\061\022\051\036\056\001" +
    "\002\000\046\003\uffdb\010\uffdb\011\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\023\uffdb\025\uffdb\030\uffdb\031\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\045\uffdb\052\uffdb\054\uffdb\060\uffdb" +
    "\001\002\000\046\003\uffd9\010\uffd9\011\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\023\uffd9\025\uffd9\030\uffd9\031\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\045\uffd9\052\uffd9\054\uffd9\060" +
    "\uffd9\001\002\000\046\003\uffd7\010\uffd7\011\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\023\uffd7\025\uffd7\030\uffd7\031" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\045\uffd7\052\uffd7\054\uffd7" +
    "\060\uffd7\001\002\000\044\003\uffd4\010\uffd4\011\uffd4\014" +
    "\uffd4\015\072\017\uffd4\023\uffd4\025\uffd4\030\uffd4\031\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\045\uffd4\052\uffd4\054\uffd4\060" +
    "\uffd4\001\002\000\042\003\uffd5\010\uffd5\011\uffd5\014\uffd5" +
    "\017\uffd5\023\uffd5\025\uffd5\030\uffd5\031\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\045\uffd5\052\uffd5\054\uffd5\060\uffd5\001\002" +
    "\000\030\003\036\010\031\011\032\017\066\025\026\031" +
    "\040\035\023\036\030\045\065\052\024\054\035\001\002" +
    "\000\050\003\uffd8\010\uffd8\011\uffd8\013\101\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\023\uffd8\025\uffd8\030\uffd8\031\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\045\uffd8\052\uffd8\054\uffd8\060" +
    "\uffd8\001\002\000\042\003\uffd6\010\uffd6\011\uffd6\014\uffd6" +
    "\017\uffd6\023\uffd6\025\uffd6\030\uffd6\031\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\045\uffd6\052\uffd6\054\uffd6\060\uffd6\001\002" +
    "\000\046\003\uffdd\010\uffdd\011\uffdd\014\uffdd\015\uffdd\016" +
    "\076\017\uffdd\023\uffdd\025\uffdd\030\uffdd\031\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\045\uffdd\052\uffdd\054\uffdd\060\uffdd\001" +
    "\002\000\012\010\031\013\061\022\051\036\056\001\002" +
    "\000\012\014\073\015\072\017\uffd4\045\uffd4\001\002\000" +
    "\010\014\071\017\uffd5\045\uffd5\001\002\000\006\017\066" +
    "\045\065\001\002\000\012\010\031\013\061\022\051\036" +
    "\056\001\002\000\012\010\031\013\061\022\051\036\056" +
    "\001\002\000\042\003\uffd3\010\uffd3\011\uffd3\014\uffd3\017" +
    "\uffd3\023\uffd3\025\uffd3\030\uffd3\031\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\045\uffd3\052\uffd3\054\uffd3\060\uffd3\001\002\000" +
    "\042\003\uffd2\010\uffd2\011\uffd2\014\uffd2\017\066\023\uffd2" +
    "\025\uffd2\030\uffd2\031\uffd2\034\uffd2\035\uffd2\036\uffd2\045" +
    "\uffd2\052\uffd2\054\uffd2\060\uffd2\001\002\000\042\003\uffd1" +
    "\010\uffd1\011\uffd1\014\uffd1\017\uffd1\023\uffd1\025\uffd1\030" +
    "\uffd1\031\uffd1\034\uffd1\035\uffd1\036\uffd1\045\uffd1\052\uffd1" +
    "\054\uffd1\060\uffd1\001\002\000\012\010\031\013\074\022" +
    "\051\036\056\001\002\000\046\003\uffda\010\uffda\011\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\023\uffda\025\uffda\030" +
    "\uffda\031\uffda\034\uffda\035\uffda\036\uffda\045\uffda\052\uffda" +
    "\054\uffda\060\uffda\001\002\000\012\010\031\013\074\022" +
    "\051\036\056\001\002\000\046\003\uffde\010\uffde\011\uffde" +
    "\014\uffde\015\uffde\016\076\017\uffde\023\uffde\025\uffde\030" +
    "\uffde\031\uffde\034\uffde\035\uffde\036\uffde\045\uffde\052\uffde" +
    "\054\uffde\060\uffde\001\002\000\012\010\031\013\074\022" +
    "\051\036\056\001\002\000\046\003\uffdc\010\uffdc\011\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\023\uffdc\025\uffdc\030" +
    "\uffdc\031\uffdc\034\uffdc\035\uffdc\036\uffdc\045\uffdc\052\uffdc" +
    "\054\uffdc\060\uffdc\001\002\000\006\014\073\015\072\001" +
    "\002\000\016\010\031\014\uffc1\021\104\022\102\036\107" +
    "\044\106\001\002\000\012\005\uffcf\014\uffcf\043\uffcf\055" +
    "\uffcf\001\002\000\006\014\uffc3\043\113\001\002\000\012" +
    "\005\uffd0\014\uffd0\043\uffd0\055\uffd0\001\002\000\012\005" +
    "\uffcc\014\uffcc\043\uffcc\055\uffcc\001\002\000\012\005\uffce" +
    "\014\uffce\043\uffce\055\uffce\001\002\000\014\005\uffcd\013" +
    "\101\014\uffcd\043\uffcd\055\uffcd\001\002\000\004\014\uffc2" +
    "\001\002\000\004\014\112\001\002\000\054\003\uffb7\005" +
    "\uffb7\010\uffb7\011\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7" +
    "\023\uffb7\025\uffb7\030\uffb7\031\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\043\uffb7\045\uffb7\052\uffb7\054\uffb7\055\uffb7\060\uffb7" +
    "\001\002\000\014\010\031\021\104\022\102\036\107\044" +
    "\106\001\002\000\004\014\uffc4\001\002\000\004\007\116" +
    "\001\002\000\004\031\117\001\002\000\004\023\uffb8\001" +
    "\002\000\016\010\031\013\061\021\121\022\051\036\056" +
    "\044\122\001\002\000\006\023\uffca\060\uffca\001\002\000" +
    "\006\023\uffc9\060\uffc9\001\002\000\012\017\066\023\uffcb" +
    "\045\065\060\uffcb\001\002\000\034\003\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\025\uffe4\026\uffe4\027\uffe4\031\uffe4\035\uffe4" +
    "\036\uffe4\042\uffe4\052\uffe4\054\uffe4\001\002\000\006\023" +
    "\uffc7\060\uffc7\001\002\000\006\023\uffc6\060\uffc6\001\002" +
    "\000\012\017\066\023\uffc8\045\065\060\uffc8\001\002\000" +
    "\004\005\131\001\002\000\006\007\uffba\042\133\001\002" +
    "\000\004\007\140\001\002\000\014\010\031\021\104\022" +
    "\102\036\107\044\106\001\002\000\004\055\135\001\002" +
    "\000\024\003\036\010\031\011\032\025\026\031\040\035" +
    "\023\036\030\052\024\054\035\001\002\000\006\007\uffba" +
    "\042\133\001\002\000\004\007\uffbb\001\002\000\004\054" +
    "\141\001\002\000\004\023\uffbc\001\002\000\034\003\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\025\uffe5\026\uffe5\027\uffe5\031" +
    "\uffe5\035\uffe5\036\uffe5\042\uffe5\052\uffe5\054\uffe5\001\002" +
    "\000\034\003\uffe7\007\uffe7\010\uffe7\011\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\031\uffe7\035\uffe7\036\uffe7\042\uffe7\052\uffe7" +
    "\054\uffe7\001\002\000\034\003\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\031\uffe8\035\uffe8\036\uffe8" +
    "\042\uffe8\052\uffe8\054\uffe8\001\002\000\016\010\031\014" +
    "\uffc1\021\104\022\102\036\107\044\106\001\002\000\004" +
    "\014\147\001\002\000\054\003\uffb6\005\uffb6\010\uffb6\011" +
    "\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\023\uffb6\025\uffb6" +
    "\030\uffb6\031\uffb6\034\uffb6\035\uffb6\036\uffb6\043\uffb6\045" +
    "\uffb6\052\uffb6\054\uffb6\055\uffb6\060\uffb6\001\002\000\034" +
    "\003\uffe6\007\uffe6\010\uffe6\011\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\031\uffe6\035\uffe6\036\uffe6\042\uffe6\052\uffe6\054\uffe6" +
    "\001\002\000\004\030\153\001\002\000\012\017\066\030" +
    "\uffe0\034\uffe0\045\065\001\002\000\024\003\036\010\031" +
    "\011\032\025\026\031\040\035\023\036\030\052\024\054" +
    "\035\001\002\000\010\007\uffbd\026\156\027\155\001\002" +
    "\000\012\010\031\013\061\022\051\036\056\001\002\000" +
    "\024\003\036\010\031\011\032\025\026\031\040\035\023" +
    "\036\030\052\024\054\035\001\002\000\004\007\160\001" +
    "\002\000\004\025\161\001\002\000\004\023\uffc0\001\002" +
    "\000\004\007\uffbe\001\002\000\004\030\164\001\002\000" +
    "\024\003\036\010\031\011\032\025\026\031\040\035\023" +
    "\036\030\052\024\054\035\001\002\000\010\007\uffbd\026" +
    "\156\027\155\001\002\000\004\007\uffbf\001\002\000\034" +
    "\003\uffe1\007\uffe1\010\uffe1\011\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\031\uffe1\035\uffe1\036\uffe1\042\uffe1\052\uffe1\054\uffe1" +
    "\001\002\000\010\017\066\023\171\045\065\001\002\000" +
    "\034\003\uffe3\007\uffe3\010\uffe3\011\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\031\uffe3\035\uffe3\036\uffe3\042\uffe3\052\uffe3\054" +
    "\uffe3\001\002\000\004\034\173\001\002\000\024\003\036" +
    "\010\031\011\032\025\026\031\040\035\023\036\030\052" +
    "\024\054\035\001\002\000\004\007\175\001\002\000\004" +
    "\034\176\001\002\000\004\023\uffb9\001\002\000\004\036" +
    "\200\001\002\000\004\023\uffee\001\002\000\006\013\203" +
    "\052\ufff9\001\002\000\004\052\232\001\002\000\004\036" +
    "\205\001\002\000\006\014\ufff6\036\205\001\002\000\006" +
    "\040\213\043\212\001\002\000\006\014\ufff5\036\205\001" +
    "\002\000\004\014\210\001\002\000\006\005\ufffa\052\ufffa" +
    "\001\002\000\004\014\ufff7\001\002\000\004\036\014\001" +
    "\002\000\012\020\uffec\032\215\033\214\046\216\001\002" +
    "\000\004\020\227\001\002\000\006\020\225\033\224\001" +
    "\002\000\004\020\uffed\001\002\000\004\020\220\001\002" +
    "\000\012\014\ufff1\023\ufff1\036\ufff1\037\221\001\002\000" +
    "\012\010\031\013\061\022\051\036\056\001\002\000\010" +
    "\017\066\023\223\045\065\001\002\000\010\014\uffef\023" +
    "\uffef\036\uffef\001\002\000\004\020\226\001\002\000\006" +
    "\014\ufff4\036\ufff4\001\002\000\006\014\ufff2\036\ufff2\001" +
    "\002\000\006\014\ufff3\036\ufff3\001\002\000\010\014\ufff0" +
    "\023\ufff0\036\ufff0\001\002\000\004\014\ufff8\001\002\000" +
    "\004\020\233\001\002\000\004\005\010\001\002\000\004" +
    "\023\235\001\002\000\012\004\015\006\ufffb\036\014\047" +
    "\016\001\002\000\004\006\ufffc\001\002\000\006\005\ufff9" +
    "\013\203\001\002\000\004\005\010\001\002\000\004\023" +
    "\242\001\002\000\012\004\015\006\ufffb\036\014\047\016" +
    "\001\002\000\004\006\ufffd\001\002\000\006\020\uffec\046" +
    "\216\001\002\000\012\004\015\006\ufffb\036\014\047\016" +
    "\001\002\000\004\006\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\010\001\001" +
    "\000\006\010\016\030\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\041\004\021\005\024\021\032\023\026\025\033\026\036" +
    "\034\020\037\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\051\014\052\015\057\016\047\032\171" +
    "\033\151\035\053\036\056\001\001\000\020\005\051\014" +
    "\052\015\057\016\047\033\167\035\053\036\056\001\001" +
    "\000\002\001\001\000\022\005\051\014\052\015\057\016" +
    "\047\032\150\033\151\035\053\036\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\104" +
    "\007\127\001\001\000\020\005\051\014\052\015\057\016" +
    "\047\033\126\035\053\036\056\001\001\000\002\001\001" +
    "\000\004\003\045\001\001\000\024\003\041\004\043\005" +
    "\024\021\032\023\026\025\033\026\036\034\020\037\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\051" +
    "\014\052\015\057\016\047\033\054\035\053\036\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\041\004" +
    "\114\005\024\021\032\023\026\025\033\026\036\034\020" +
    "\037\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\051\014\061\015\057\016\047" +
    "\033\063\035\062\036\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\051\014\052" +
    "\015\057\016\047\033\067\035\053\036\056\001\001\000" +
    "\020\005\051\014\052\015\057\016\047\033\066\035\053" +
    "\036\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\051\015\074\016\047\001\001" +
    "\000\002\001\001\000\012\005\051\014\077\015\057\016" +
    "\047\001\001\000\002\001\001\000\006\005\051\016\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\104\006\107\007\102\013\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\104\006\113\007" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\051\014\052\015" +
    "\057\016\047\033\122\035\053\036\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\131\001\001\000\002\001" +
    "\001\000\006\005\104\007\133\001\001\000\002\001\001" +
    "\000\024\003\041\004\135\005\024\021\032\023\026\025" +
    "\033\026\036\034\020\037\040\001\001\000\004\024\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\104\006\107\007\102\013\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\041\004\153\005" +
    "\024\021\032\023\026\025\033\026\036\034\020\037\040" +
    "\001\001\000\004\022\156\001\001\000\022\005\051\014" +
    "\052\015\057\016\047\032\162\033\151\035\053\036\056" +
    "\001\001\000\024\003\041\004\161\005\024\021\032\023" +
    "\026\025\033\026\036\034\020\037\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\041\004\164\005\024" +
    "\021\032\023\026\025\033\026\036\034\020\037\040\001" +
    "\001\000\004\022\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\041\004\173\005\024\021\032\023\026" +
    "\025\033\026\036\034\020\037\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\201\001\001\000\002\001" +
    "\001\000\010\017\206\020\205\030\203\001\001\000\010" +
    "\017\230\020\205\030\203\001\001\000\002\001\001\000" +
    "\010\017\210\020\205\030\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\227\001" +
    "\001\000\004\012\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\051\014\052\015\057\016\047\033\221" +
    "\035\053\036\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\233\001\001\000\002\001\001" +
    "\000\006\010\235\030\012\001\001\000\002\001\001\000" +
    "\004\027\237\001\001\000\004\031\240\001\001\000\002" +
    "\001\001\000\006\010\242\030\012\001\001\000\002\001" +
    "\001\000\004\012\216\001\001\000\006\010\245\030\012" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token){
        System.out.print("Syntax Error:");
        System.out.print(" line:" + cur_token.left);
        System.out.print(" column:" + cur_token.right);
        System.out.println();
    }

    public void expected_token(String token){
      System.out.print("Expected Token " + token);
      System.out.println();
    };


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // function_call ::= PUT OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // function_call ::= ID OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // for ::= FOR asignation TO expression statement END FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // while ::= WHILE condition LOOP statement END LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // case_a ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_a",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // case_a ::= WHEN primary CASEASIG statement case_a 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_a",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // case ::= CASE primary IS case_a END CASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if_a ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // if_a ::= ELSE statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // if_a ::= ELSEIF condition THEN statement if_a 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // if ::= IF condition THEN statement if_a END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parameters ::= list_primary 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // list_primary ::= primary 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_primary",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // list_primary ::= primary COMMA list_primary 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_primary",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asignation ::= error 
            {
              Object RESULT =null;
		 parser.expected_token(":="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asignation ::= error LITERAL_STRING 
            {
              Object RESULT =null;
		 parser.expected_token(":="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asignation ::= error LITERAL_BOOLEAN 
            {
              Object RESULT =null;
		 parser.expected_token(":="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignation ::= error expression 
            {
              Object RESULT =null;
		 parser.expected_token(":="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asignation ::= ID ASIGNATION LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asignation ::= ID ASIGNATION LITERAL_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // asignation ::= ID ASIGNATION expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // primary ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // primary ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // primary ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // primary ::= LITERAL_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // primary ::= LITERAL_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condition_expression ::= OPEN_PARENTHESIS condition_expression CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condition_expression ::= expression CONDITION_ELEMENT expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relation_expression ::= expression RELATION_OPERATOR expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= mathematical_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= condition_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= relation_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parenthesis_operation ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parenthesis_operation ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parenthesis_operation ::= LITERAL_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parenthesis_operation ::= OPEN_PARENTHESIS mathematical_expression CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // mult_operation ::= parenthesis_operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_operation",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mult_operation ::= mult_operation MULT_OPERATOR parenthesis_operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_operation",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // mathematical_expression ::= mult_operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathematical_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mathematical_expression ::= mathematical_expression SUM_OPERATOR mult_operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathematical_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simple_expression ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condition ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function_call_statement ::= function_call END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call_statement",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // simple_statement ::= function_call_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // simple_statement ::= RETURN expression END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // simple_statement ::= for END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // simple_statement ::= while END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // simple_statement ::= case END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // simple_statement ::= if END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // simple_statement ::= NEW_LINE END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // simple_statement ::= asignation END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= simple_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= simple_statement statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // constant ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // constant ::= CONSTANT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // body_declaration ::= IS declaration BEGIN statement END ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_declaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // simple_declaration ::= ID DECLARATION constant TYPE ASIGNATION expression END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // simple_declaration ::= ID COMMA simple_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simple_declaration ::= ID DECLARATION constant TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // in_out_declaration ::= ID DECLARATION IN OUT TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // in_out_declaration ::= ID DECLARATION OUT TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // in_out_declaration ::= ID DECLARATION IN TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list_declaration_parameters ::= in_out_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_declaration_parameters ::= simple_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list_declaration_parameters ::= in_out_declaration list_declaration_parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list_declaration_parameters ::= simple_declaration list_declaration_parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // input_parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_parameters",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // input_parameters ::= OPEN_PARENTHESIS list_declaration_parameters CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_parameters",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= FUNCTION ID input_parameters RETURN TYPE body_declaration END_INSTRUCTION declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= PROCEDURE ID input_parameters body_declaration END_INSTRUCTION declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration ::= simple_declaration END_INSTRUCTION declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // procedure ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= procedure EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // procedure ::= PROCEDURE ID body_declaration END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

