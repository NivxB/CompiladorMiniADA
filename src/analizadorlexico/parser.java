
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 24 13:25:09 CDT 2016
//----------------------------------------------------

package analizadorlexico;

import java_cup.runtime.*;
import analizadorlexico.AST.*;
import analizadorlexico.AST.Declaration.*;
import analizadorlexico.AST.Statement.*;
import analizadorlexico.AST.Primary.*;
import analizadorlexico.AST.Expression.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 24 13:25:09 CDT 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\011\000\002\002\004\000\002\002" +
    "\011\000\002\002\011\000\002\002\011\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\020\005\000" +
    "\002\020\015\000\002\020\017\000\002\020\002\000\002" +
    "\035\005\000\002\035\002\000\002\034\005\000\002\034" +
    "\005\000\002\034\003\000\002\034\003\000\002\021\006" +
    "\000\002\021\006\000\002\021\007\000\002\022\006\000" +
    "\002\022\005\000\002\022\011\000\002\033\003\000\002" +
    "\033\002\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\006\000\002\004\004\000\002\004\002\000" +
    "\002\015\004\000\002\032\003\000\002\024\002\000\002" +
    "\025\005\000\002\025\003\000\002\026\005\000\002\026" +
    "\003\000\002\027\005\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\031\005\000\002\030\005\000\002\030\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\003\005\000\002\003\005\000" +
    "\002\003\003\000\002\016\005\000\002\016\003\000\002" +
    "\017\003\000\002\017\002\000\002\005\011\000\002\006" +
    "\007\000\002\006\004\000\002\006\002\000\002\007\010" +
    "\000\002\012\007\000\002\012\002\000\002\010\010\000" +
    "\002\011\011\000\002\013\006\000\002\013\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\006\003\005\004\004\001\002\000\006\003" +
    "\275\047\274\001\002\000\004\047\010\001\002\000\004" +
    "\002\007\001\002\000\004\002\000\001\002\000\004\005" +
    "\011\001\002\000\012\004\014\006\ufff6\035\015\047\012" +
    "\001\002\000\006\030\273\033\224\001\002\000\004\014" +
    "\271\001\002\000\004\047\257\001\002\000\004\047\212" +
    "\001\002\000\004\006\017\001\002\000\026\003\034\007" +
    "\uffdf\010\037\016\030\022\024\026\021\040\036\042\035" +
    "\047\032\050\025\001\002\000\004\014\210\001\002\000" +
    "\016\012\060\047\055\050\025\051\051\057\047\060\046" +
    "\001\002\000\004\014\201\001\002\000\034\003\034\007" +
    "\uffdf\010\037\016\030\017\uffdf\020\uffdf\022\024\026\021" +
    "\032\uffdf\040\036\042\035\047\032\050\025\001\002\000" +
    "\006\003\034\047\171\001\002\000\004\012\166\001\002" +
    "\000\004\014\164\001\002\000\004\014\163\001\002\000" +
    "\016\012\060\047\055\050\025\051\051\057\047\060\046" +
    "\001\002\000\004\014\143\001\002\000\010\003\137\012" +
    "\100\027\140\001\002\000\004\007\130\001\002\000\006" +
    "\014\uffc4\046\uffc4\001\002\000\014\047\106\050\025\051" +
    "\105\057\103\060\101\001\002\000\016\012\060\047\055" +
    "\050\025\051\051\057\047\060\046\001\002\000\004\014" +
    "\043\001\002\000\004\014\041\001\002\000\034\003\034" +
    "\007\uffdf\010\037\016\030\017\uffdf\020\uffdf\022\024\026" +
    "\021\032\uffdf\040\036\042\035\047\032\050\025\001\002" +
    "\000\012\007\uffe4\017\uffe4\020\uffe4\032\uffe4\001\002\000" +
    "\034\003\034\007\uffdf\010\037\016\030\017\uffdf\020\uffdf" +
    "\022\024\026\021\032\uffdf\040\036\042\035\047\032\050" +
    "\025\001\002\000\012\007\uffe6\017\uffe6\020\uffe6\032\uffe6" +
    "\001\002\000\050\003\uffd8\007\uffd8\010\uffd8\013\uffd8\014" +
    "\uffd8\016\uffd8\021\uffd8\022\uffd8\025\uffd8\026\uffd8\040\uffd8" +
    "\042\uffd8\046\uffd8\047\uffd8\050\uffd8\052\uffd8\053\uffd8\054" +
    "\uffd8\055\uffd8\001\002\000\050\003\uffd6\007\uffd6\010\uffd6" +
    "\013\uffd6\014\uffd6\016\uffd6\021\uffd6\022\uffd6\025\uffd6\026" +
    "\uffd6\040\uffd6\042\uffd6\046\uffd6\047\uffd6\050\uffd6\052\uffd6" +
    "\053\uffd6\054\uffd6\055\uffd6\001\002\000\044\003\uffd0\007" +
    "\uffd0\010\uffd0\013\uffd0\014\uffd0\016\uffd0\021\uffd0\022\uffd0" +
    "\025\uffd0\026\uffd0\040\uffd0\042\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\054\uffd0\055\uffd0\001\002\000\050\003\uffd4\007\uffd4" +
    "\010\uffd4\013\uffd4\014\uffd4\016\uffd4\021\uffd4\022\uffd4\025" +
    "\uffd4\026\uffd4\040\uffd4\042\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\052\uffd4\053\uffd4\054\uffd4\055\uffd4\001\002\000\044\003" +
    "\uffcf\007\uffcf\010\uffcf\013\uffcf\014\uffcf\016\uffcf\021\uffcf" +
    "\022\uffcf\025\uffcf\026\uffcf\040\uffcf\042\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\054\uffcf\055\uffcf\001\002\000\046\003\uffd1" +
    "\007\uffd1\010\uffd1\013\uffd1\014\uffd1\016\uffd1\021\uffd1\022" +
    "\uffd1\025\uffd1\026\uffd1\040\uffd1\042\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\052\071\054\uffd1\055\uffd1\001\002\000\044\003" +
    "\uffd2\007\uffd2\010\uffd2\013\uffd2\014\uffd2\016\uffd2\021\uffd2" +
    "\022\uffd2\025\uffd2\026\uffd2\040\uffd2\042\uffd2\046\uffd2\047" +
    "\uffd2\050\uffd2\054\uffd2\055\uffd2\001\002\000\010\014\114" +
    "\054\065\055\064\001\002\000\052\003\uffd5\007\uffd5\010" +
    "\uffd5\012\100\013\uffd5\014\uffd5\016\uffd5\021\uffd5\022\uffd5" +
    "\025\uffd5\026\uffd5\040\uffd5\042\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\001\002\000\044" +
    "\003\uffd3\007\uffd3\010\uffd3\013\uffd3\014\uffd3\016\uffd3\021" +
    "\uffd3\022\uffd3\025\uffd3\026\uffd3\040\uffd3\042\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\054\uffd3\055\uffd3\001\002\000\050\003" +
    "\uffda\007\uffda\010\uffda\013\uffda\014\uffda\016\uffda\021\uffda" +
    "\022\uffda\025\uffda\026\uffda\040\uffda\042\uffda\046\uffda\047" +
    "\uffda\050\uffda\052\uffda\053\075\054\uffda\055\uffda\001\002" +
    "\000\016\012\060\047\055\050\025\051\051\057\047\060" +
    "\046\001\002\000\012\013\072\052\071\054\uffd1\055\uffd1" +
    "\001\002\000\010\013\070\054\uffd2\055\uffd2\001\002\000" +
    "\006\054\065\055\064\001\002\000\016\012\060\047\055" +
    "\050\025\051\051\057\047\060\046\001\002\000\016\012" +
    "\060\047\055\050\025\051\051\057\047\060\046\001\002" +
    "\000\044\003\uffce\007\uffce\010\uffce\013\uffce\014\uffce\016" +
    "\uffce\021\uffce\022\uffce\025\uffce\026\uffce\040\uffce\042\uffce" +
    "\046\uffce\047\uffce\050\uffce\054\uffce\055\uffce\001\002\000" +
    "\044\003\uffcd\007\uffcd\010\uffcd\013\uffcd\014\uffcd\016\uffcd" +
    "\021\uffcd\022\uffcd\025\uffcd\026\uffcd\040\uffcd\042\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\054\065\055\uffcd\001\002\000\044" +
    "\003\uffcc\007\uffcc\010\uffcc\013\uffcc\014\uffcc\016\uffcc\021" +
    "\uffcc\022\uffcc\025\uffcc\026\uffcc\040\uffcc\042\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\054\uffcc\055\uffcc\001\002\000\012\012" +
    "\073\047\055\050\025\060\046\001\002\000\050\003\uffd7" +
    "\007\uffd7\010\uffd7\013\uffd7\014\uffd7\016\uffd7\021\uffd7\022" +
    "\uffd7\025\uffd7\026\uffd7\040\uffd7\042\uffd7\046\uffd7\047\uffd7" +
    "\050\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\001\002\000" +
    "\012\012\073\047\055\050\025\060\046\001\002\000\050" +
    "\003\uffdb\007\uffdb\010\uffdb\013\uffdb\014\uffdb\016\uffdb\021" +
    "\uffdb\022\uffdb\025\uffdb\026\uffdb\040\uffdb\042\uffdb\046\uffdb" +
    "\047\uffdb\050\uffdb\052\uffdb\053\075\054\uffdb\055\uffdb\001" +
    "\002\000\012\012\073\047\055\050\025\060\046\001\002" +
    "\000\050\003\uffd9\007\uffd9\010\uffd9\013\uffd9\014\uffd9\016" +
    "\uffd9\021\uffd9\022\uffd9\025\uffd9\026\uffd9\040\uffd9\042\uffd9" +
    "\046\uffd9\047\uffd9\050\uffd9\052\uffd9\053\uffd9\054\uffd9\055" +
    "\uffd9\001\002\000\006\013\072\052\071\001\002\000\016" +
    "\013\uffc0\047\106\050\025\051\105\057\103\060\101\001" +
    "\002\000\012\005\uffca\013\uffca\033\uffca\043\uffca\001\002" +
    "\000\006\013\uffc2\033\112\001\002\000\012\005\uffcb\013" +
    "\uffcb\033\uffcb\043\uffcb\001\002\000\012\005\uffc7\013\uffc7" +
    "\033\uffc7\043\uffc7\001\002\000\012\005\uffc9\013\uffc9\033" +
    "\uffc9\043\uffc9\001\002\000\014\005\uffc8\012\100\013\uffc8" +
    "\033\uffc8\043\uffc8\001\002\000\004\013\uffc1\001\002\000" +
    "\004\013\111\001\002\000\056\003\uffb6\005\uffb6\007\uffb6" +
    "\010\uffb6\013\uffb6\014\uffb6\016\uffb6\021\uffb6\022\uffb6\025" +
    "\uffb6\026\uffb6\033\uffb6\040\uffb6\042\uffb6\043\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\001" +
    "\002\000\014\047\106\050\025\051\105\057\103\060\101" +
    "\001\002\000\004\013\uffc3\001\002\000\034\003\034\007" +
    "\uffdf\010\037\016\030\017\uffdf\020\uffdf\022\024\026\021" +
    "\032\uffdf\040\036\042\035\047\032\050\025\001\002\000" +
    "\012\007\uffe1\017\uffe1\020\uffe1\032\uffe1\001\002\000\004" +
    "\005\117\001\002\000\006\007\uffb9\032\121\001\002\000" +
    "\004\007\126\001\002\000\014\047\106\050\025\051\105" +
    "\057\103\060\101\001\002\000\004\043\123\001\002\000" +
    "\030\003\034\007\uffdf\010\037\016\030\022\024\026\021" +
    "\032\uffdf\040\036\042\035\047\032\050\025\001\002\000" +
    "\006\007\uffb9\032\121\001\002\000\004\007\uffba\001\002" +
    "\000\004\042\127\001\002\000\004\014\uffbb\001\002\000" +
    "\006\003\133\047\132\001\002\000\004\002\uffff\001\002" +
    "\000\006\003\135\014\136\001\002\000\004\014\134\001" +
    "\002\000\004\002\ufffb\001\002\000\004\002\ufffa\001\002" +
    "\000\004\002\ufffc\001\002\000\016\012\060\047\055\050" +
    "\025\051\051\057\047\060\046\001\002\000\016\012\060" +
    "\047\055\050\025\051\051\057\047\060\046\001\002\000" +
    "\012\014\uffc6\046\uffc6\054\065\055\064\001\002\000\012" +
    "\014\uffc5\046\uffc5\054\065\055\064\001\002\000\034\003" +
    "\034\007\uffdf\010\037\016\030\017\uffdf\020\uffdf\022\024" +
    "\026\021\032\uffdf\040\036\042\035\047\032\050\025\001" +
    "\002\000\012\007\uffe2\017\uffe2\020\uffe2\032\uffe2\001\002" +
    "\000\004\021\147\001\002\000\012\021\uffdd\025\uffdd\054" +
    "\065\055\064\001\002\000\032\003\034\007\uffdf\010\037" +
    "\016\030\017\uffdf\020\uffdf\022\024\026\021\040\036\042" +
    "\035\047\032\050\025\001\002\000\010\007\uffbc\017\152" +
    "\020\151\001\002\000\016\012\060\047\055\050\025\051" +
    "\051\057\047\060\046\001\002\000\026\003\034\007\uffdf" +
    "\010\037\016\030\022\024\026\021\040\036\042\035\047" +
    "\032\050\025\001\002\000\004\007\154\001\002\000\004" +
    "\016\155\001\002\000\004\014\uffbf\001\002\000\004\007" +
    "\uffbd\001\002\000\004\021\160\001\002\000\032\003\034" +
    "\007\uffdf\010\037\016\030\017\uffdf\020\uffdf\022\024\026" +
    "\021\040\036\042\035\047\032\050\025\001\002\000\010" +
    "\007\uffbc\017\152\020\151\001\002\000\004\007\uffbe\001" +
    "\002\000\034\003\uffde\007\uffde\010\uffde\016\uffde\017\uffde" +
    "\020\uffde\022\uffde\026\uffde\032\uffde\040\uffde\042\uffde\047" +
    "\uffde\050\uffde\001\002\000\034\003\034\007\uffdf\010\037" +
    "\016\030\017\uffdf\020\uffdf\022\024\026\021\032\uffdf\040" +
    "\036\042\035\047\032\050\025\001\002\000\012\007\uffe3" +
    "\017\uffe3\020\uffe3\032\uffe3\001\002\000\016\013\uffc0\047" +
    "\106\050\025\051\105\057\103\060\101\001\002\000\004" +
    "\013\170\001\002\000\056\003\uffb5\005\uffb5\007\uffb5\010" +
    "\uffb5\013\uffb5\014\uffb5\016\uffb5\021\uffb5\022\uffb5\025\uffb5" +
    "\026\uffb5\033\uffb5\040\uffb5\042\uffb5\043\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\001\002" +
    "\000\006\003\137\027\140\001\002\000\004\046\173\001" +
    "\002\000\016\012\060\047\055\050\025\051\051\057\047" +
    "\060\046\001\002\000\032\003\034\007\uffdf\010\037\016" +
    "\030\022\024\026\021\040\036\042\035\047\032\050\025" +
    "\054\065\055\064\001\002\000\004\007\176\001\002\000" +
    "\004\022\177\001\002\000\004\014\uffb7\001\002\000\012" +
    "\007\uffe0\017\uffe0\020\uffe0\032\uffe0\001\002\000\034\003" +
    "\034\007\uffdf\010\037\016\030\017\uffdf\020\uffdf\022\024" +
    "\026\021\032\uffdf\040\036\042\035\047\032\050\025\001" +
    "\002\000\012\007\uffe7\017\uffe7\020\uffe7\032\uffe7\001\002" +
    "\000\004\025\204\001\002\000\026\003\034\007\uffdf\010" +
    "\037\016\030\022\024\026\021\040\036\042\035\047\032" +
    "\050\025\001\002\000\004\007\206\001\002\000\004\025" +
    "\207\001\002\000\004\014\uffb8\001\002\000\034\003\034" +
    "\007\uffdf\010\037\016\030\017\uffdf\020\uffdf\022\024\026" +
    "\021\032\uffdf\040\036\042\035\047\032\050\025\001\002" +
    "\000\012\007\uffe5\017\uffe5\020\uffe5\032\uffe5\001\002\000" +
    "\006\012\214\040\ufff4\001\002\000\004\040\245\001\002" +
    "\000\004\047\216\001\002\000\006\013\ufff1\014\243\001" +
    "\002\000\006\030\225\033\224\001\002\000\006\013\ufff0" +
    "\014\222\001\002\000\004\013\221\001\002\000\006\005" +
    "\ufff5\040\ufff5\001\002\000\004\047\216\001\002\000\004" +
    "\013\ufff2\001\002\000\004\047\012\001\002\000\012\023" +
    "\227\024\226\034\230\056\uffe8\001\002\000\004\056\241" +
    "\001\002\000\006\024\236\056\237\001\002\000\004\056" +
    "\uffe9\001\002\000\004\056\232\001\002\000\010\013\uffec" +
    "\014\uffec\027\233\001\002\000\016\012\060\047\055\050" +
    "\025\051\051\057\047\060\046\001\002\000\010\014\235" +
    "\054\065\055\064\001\002\000\006\013\uffea\014\uffea\001" +
    "\002\000\004\056\240\001\002\000\006\013\uffef\014\uffef" +
    "\001\002\000\006\013\uffed\014\uffed\001\002\000\006\013" +
    "\uffee\014\uffee\001\002\000\006\013\uffeb\014\uffeb\001\002" +
    "\000\004\047\216\001\002\000\004\013\ufff3\001\002\000" +
    "\004\056\246\001\002\000\004\005\247\001\002\000\012" +
    "\004\014\006\ufff6\035\015\047\012\001\002\000\004\006" +
    "\251\001\002\000\026\003\034\007\uffdf\010\037\016\030" +
    "\022\024\026\021\040\036\042\035\047\032\050\025\001" +
    "\002\000\004\007\253\001\002\000\004\047\254\001\002" +
    "\000\004\014\255\001\002\000\012\004\014\006\ufff6\035" +
    "\015\047\012\001\002\000\004\006\ufff7\001\002\000\006" +
    "\005\ufff4\012\214\001\002\000\004\005\261\001\002\000" +
    "\012\004\014\006\ufff6\035\015\047\012\001\002\000\004" +
    "\006\263\001\002\000\026\003\034\007\uffdf\010\037\016" +
    "\030\022\024\026\021\040\036\042\035\047\032\050\025" +
    "\001\002\000\004\007\265\001\002\000\004\047\266\001" +
    "\002\000\004\014\267\001\002\000\012\004\014\006\ufff6" +
    "\035\015\047\012\001\002\000\004\006\ufff8\001\002\000" +
    "\012\004\014\006\ufff6\035\015\047\012\001\002\000\004" +
    "\006\ufff9\001\002\000\006\034\230\056\uffe8\001\002\000" +
    "\006\003\303\005\304\001\002\000\004\005\276\001\002" +
    "\000\012\004\014\006\ufff6\035\015\047\012\001\002\000" +
    "\004\006\300\001\002\000\026\003\034\007\uffdf\010\037" +
    "\016\030\022\024\026\021\040\036\042\035\047\032\050" +
    "\025\001\002\000\004\007\130\001\002\000\004\002\ufffe" +
    "\001\002\000\012\004\014\006\ufff6\035\015\047\012\001" +
    "\002\000\012\004\014\006\ufff6\035\015\047\012\001\002" +
    "\000\004\006\306\001\002\000\026\003\034\007\uffdf\010" +
    "\037\016\030\022\024\026\021\040\036\042\035\047\032" +
    "\050\025\001\002\000\004\007\130\001\002\000\004\002" +
    "\001\001\002\000\004\006\312\001\002\000\026\003\034" +
    "\007\uffdf\010\037\016\030\022\024\026\021\040\036\042" +
    "\035\047\032\050\025\001\002\000\004\007\130\001\002" +
    "\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\015\022\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\021\004\032\005\017\007" +
    "\037\010\025\011\030\013\026\015\022\001\001\000\002" +
    "\001\001\000\022\013\047\023\145\025\051\026\056\027" +
    "\044\030\052\031\055\032\202\001\001\000\002\001\001" +
    "\000\022\003\021\004\177\005\017\007\037\010\025\011" +
    "\030\013\026\015\022\001\001\000\004\003\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\013\047\023\145\025\051\026\056\027\044\030\052" +
    "\031\055\032\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\130\001\001\000\002\001\001\000\006" +
    "\013\103\014\115\001\001\000\020\013\047\023\053\025" +
    "\051\026\056\027\044\030\052\031\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\021\004\041\005" +
    "\017\007\037\010\025\011\030\013\026\015\022\001\001" +
    "\000\002\001\001\000\022\003\021\004\043\005\017\007" +
    "\037\010\025\011\030\013\026\015\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\047\023\062" +
    "\025\060\026\056\027\044\030\061\031\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\047\023\066\025\051\026\056\027\044\030\052\031" +
    "\055\001\001\000\020\013\047\023\065\025\051\026\056" +
    "\027\044\030\052\031\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\047\026\073" +
    "\027\044\001\001\000\002\001\001\000\012\013\047\025" +
    "\076\026\056\027\044\001\001\000\002\001\001\000\006" +
    "\013\047\027\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\103\014\101\016\106\017\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\103\014\101\016\112\001\001\000\002\001\001\000\022" +
    "\003\021\004\114\005\017\007\037\010\025\011\030\013" +
    "\026\015\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\117\001\001\000\002\001\001\000\006\013" +
    "\103\014\121\001\001\000\002\001\001\000\022\003\021" +
    "\004\123\005\017\007\037\010\025\011\030\013\026\015" +
    "\022\001\001\000\004\012\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\047\023\141\025\051\026\056\027\044\030\052\031\055" +
    "\001\001\000\020\013\047\023\140\025\051\026\056\027" +
    "\044\030\052\031\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\021\004\143\005\017\007\037\010" +
    "\025\011\030\013\026\015\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\021\004" +
    "\147\005\017\007\037\010\025\011\030\013\026\015\022" +
    "\001\001\000\004\006\152\001\001\000\022\013\047\023" +
    "\145\025\051\026\056\027\044\030\052\031\055\032\156" +
    "\001\001\000\022\003\021\004\155\005\017\007\037\010" +
    "\025\011\030\013\026\015\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\021\004\160\005\017\007\037" +
    "\010\025\011\030\013\026\015\022\001\001\000\004\006" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\021\004\164\005\017\007\037\010\025\011\030\013" +
    "\026\015\022\001\001\000\002\001\001\000\012\013\103" +
    "\014\101\016\106\017\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\047\023\173\025\051\026\056\027\044\030\052\031" +
    "\055\001\001\000\022\003\021\004\174\005\017\007\037" +
    "\010\025\011\030\013\026\015\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\021\004\201\005\017\007\037\010\025\011" +
    "\030\013\026\015\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\021\004\204\005\017\007\037\010" +
    "\025\011\030\013\026\015\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\021\004" +
    "\210\005\017\007\037\010\025\011\030\013\026\015\022" +
    "\001\001\000\002\001\001\000\004\035\212\001\001\000" +
    "\002\001\001\000\010\021\216\022\214\034\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\216\022\214" +
    "\034\222\001\001\000\002\001\001\000\004\022\241\001" +
    "\001\000\004\033\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\013\047\023\233\025\051\026\056\027\044" +
    "\030\052\031\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\216\022" +
    "\214\034\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\247\022\012\001\001\000" +
    "\002\001\001\000\022\003\021\004\251\005\017\007\037" +
    "\010\025\011\030\013\026\015\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\255" +
    "\022\012\001\001\000\002\001\001\000\004\035\257\001" +
    "\001\000\002\001\001\000\006\020\261\022\012\001\001" +
    "\000\002\001\001\000\022\003\021\004\263\005\017\007" +
    "\037\010\025\011\030\013\026\015\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\267\022\012\001\001\000\002\001\001\000\006\020\271" +
    "\022\012\001\001\000\002\001\001\000\004\033\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\276" +
    "\022\012\001\001\000\002\001\001\000\022\003\021\004" +
    "\300\005\017\007\037\010\025\011\030\013\026\015\022" +
    "\001\001\000\004\036\301\001\001\000\002\001\001\000" +
    "\006\020\310\022\012\001\001\000\006\020\304\022\012" +
    "\001\001\000\002\001\001\000\022\003\021\004\306\005" +
    "\017\007\037\010\025\011\030\013\026\015\022\001\001" +
    "\000\004\036\307\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\021\004\312\005\017\007\037\010\025" +
    "\011\030\013\026\015\022\001\001\000\004\036\313\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public InitProcedure FINALOBJECT;
    public void syntax_error(Symbol cur_token) {
        System.out.print("Syntax Error:");
        System.out.print(" line:" + cur_token.left);
        System.out.print(" column:" + cur_token.right);
        System.out.println();
    }
    

    public void expected_token(String token){
      System.out.print("Expected Token " + token);
      System.out.println();
    };


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // function_call ::= PUT OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS 
            {
              Primary RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListPrimary p = (ListPrimary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionCall(id,p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // function_call ::= ID OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS 
            {
              Primary RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListPrimary p = (ListPrimary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionCall(id,p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // for ::= FOR asignation TO expression statement END FOR 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ForStatement(a,s,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // while ::= WHILE condition LOOP statement END LOOP 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WhileStatement(c,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // case_a ::= 
            {
              CaseBody RESULT =null;
		RESULT = new CaseBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_a",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // case_a ::= WHEN primary CASEASIG statement case_a 
            {
              CaseBody RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Primary p = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseBody cb = (CaseBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CaseBody(p,s,cb); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_a",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // case ::= CASE primary IS case_a END CASE 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Primary p = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CaseBody cb = (CaseBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CaseStatement(p,cb); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if_a ::= 
            {
              Statement RESULT =null;
		 RESULT = new IfStatement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if_a ::= ELSE statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStatement(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // if_a ::= ELSEIF condition THEN statement if_a 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement ef = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStatement(c,s,ef); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // if ::= IF condition THEN statement if_a END IF 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement ef = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IfStatement(c,s,ef); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parameters ::= 
            {
              ListPrimary RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parameters ::= list_primary 
            {
              ListPrimary RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListPrimary lp = (ListPrimary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // list_primary ::= primary 
            {
              ListPrimary RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Primary p = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListPrimary(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_primary",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // list_primary ::= primary COMMA list_primary 
            {
              ListPrimary RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Primary p = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListPrimary lp = (ListPrimary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListPrimary(p,lp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_primary",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asignation ::= error 
            {
              Statement RESULT =null;
		  parser.expected_token(":="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asignation ::= ID error expression 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new AsignationStatement(id,e); ; 
                parser.expected_token(":=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asignation ::= ID ASIGNATION expression 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignationStatement(id,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // primary ::= function_call 
            {
              Primary RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Primary fc = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // primary ::= ID 
            {
              Primary RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // primary ::= LITERAL_STRING 
            {
              Primary RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LiteralString(S);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // primary ::= LITERAL_INT 
            {
              Primary RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LiteralInt(Integer.parseInt(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // primary ::= LITERAL_BOOLEAN 
            {
              Primary RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LiteralBoolean(Boolean.parseBoolean(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condition_expression ::= OPEN_PARENTHESIS condition_expression CLOSE_PARENTHESIS 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condition_expression ::= expression CONDITION_ELEMENT expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionExpression(e,e1,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // relation_expression ::= expression RELATION_OPERATOR expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelationExpression(e,e1,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= LITERAL_STRING 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimaryExpression(new LiteralString(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= LITERAL_BOOLEAN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimaryExpression(new LiteralBoolean(Boolean.parseBoolean(e))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= mathematical_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= condition_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= relation_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parenthesis_operation ::= function_call 
            {
              Expression RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Primary fc = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new PrimaryExpression(fc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parenthesis_operation ::= ID 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimaryExpression(new ID(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parenthesis_operation ::= LITERAL_INT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimaryExpression(new LiteralInt(Integer.parseInt(i))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parenthesis_operation ::= OPEN_PARENTHESIS mathematical_expression CLOSE_PARENTHESIS 
            {
              Expression RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = me; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // mult_operation ::= parenthesis_operation 
            {
              Expression RESULT =null;
		int poleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int poright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression po = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = po; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_operation",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // mult_operation ::= mult_operation MULT_OPERATOR parenthesis_operation 
            {
              Expression RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression mo = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mult = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int poright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression po = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultExpression(mo,po,mult); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_operation",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // mathematical_expression ::= mult_operation 
            {
              Expression RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression mo = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = mo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathematical_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // mathematical_expression ::= mathematical_expression SUM_OPERATOR mult_operation 
            {
              Expression RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int soleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int soright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String so = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int me2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int me2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression me2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AddExpression(me,me2,so); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathematical_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // simple_expression ::= 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condition ::= expression 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Condition(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function_call_statement ::= function_call END_INSTRUCTION 
            {
              Primary RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Primary fc = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = fc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= 
            {
              Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= function_call_statement statement 
            {
              Statement RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Primary fs = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionCallStatement(fs,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= RETURN expression END_INSTRUCTION statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReturnStatement(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= for END_INSTRUCTION statement 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement f = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForStatement(f,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= while END_INSTRUCTION statement 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement w = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileStatement(w,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= case END_INSTRUCTION statement 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CaseStatement(c,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= if END_INSTRUCTION statement 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStatement(i,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= NEW_LINE END_INSTRUCTION statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NewLineStatement(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= asignation END_INSTRUCTION statement 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AsignationStatement(a,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // constant ::= 
            {
              Boolean RESULT =null;
		RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // constant ::= CONSTANT 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // simple_declaration ::= ID DECLARATION constant TYPE ASIGNATION expression END_INSTRUCTION 
            {
              Declaration RESULT =null;
		 /* LATER */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // simple_declaration ::= ID COMMA simple_declaration 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration sd = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleDeclaration(i,sd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // simple_declaration ::= ID DECLARATION constant TYPE 
            {
              Declaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleDeclaration(id,t,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // in_out_declaration ::= ID DECLARATION IN OUT TYPE 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InOutDeclaration(i,t,"IN OUT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // in_out_declaration ::= ID DECLARATION OUT TYPE 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InOutDeclaration(i,t,"OUT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // in_out_declaration ::= ID DECLARATION IN TYPE 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InOutDeclaration(i,t,"IN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_declaration_parameters ::= in_out_declaration 
            {
              ListDeclarationParameter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ListDeclarationParameter(d,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_declaration_parameters ::= simple_declaration 
            {
              ListDeclarationParameter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ListDeclarationParameter(d,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list_declaration_parameters ::= in_out_declaration END_INSTRUCTION list_declaration_parameters 
            {
              ListDeclarationParameter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListDeclarationParameter lp = (ListDeclarationParameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ListDeclarationParameter(d,lp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // list_declaration_parameters ::= simple_declaration END_INSTRUCTION list_declaration_parameters 
            {
              ListDeclarationParameter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListDeclarationParameter lp = (ListDeclarationParameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ListDeclarationParameter(d,lp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // input_parameters ::= 
            {
              ListDeclarationParameter RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_parameters",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // input_parameters ::= OPEN_PARENTHESIS list_declaration_parameters CLOSE_PARENTHESIS 
            {
              ListDeclarationParameter RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListDeclarationParameter lp = (ListDeclarationParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = lp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_parameters",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= 
            {
              Declaration RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= FUNCTION ID input_parameters RETURN TYPE IS declaration BEGIN statement END ID END_INSTRUCTION declaration 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int ipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ListDeclarationParameter ip = (ListDeclarationParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d2 = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionDeclaration(i,ip,d,s,t,d2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= PROCEDURE ID input_parameters IS declaration BEGIN statement END ID END_INSTRUCTION declaration 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ListDeclarationParameter ip = (ListDeclarationParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d2 = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProcedureDeclaration(i,ip,d,s,d2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= simple_declaration END_INSTRUCTION declaration 
            {
              Declaration RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declaration s = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleDeclaration(s,d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // finalprocedure ::= END ID error 
            {
              Object RESULT =null;
		parser.expected_token(";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("finalprocedure",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // finalprocedure ::= END error END_INSTRUCTION 
            {
              Object RESULT =null;
		parser.expected_token("id");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("finalprocedure",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // finalprocedure ::= END ID END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finalprocedure",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // procedure ::= PROCEDURE ID error declaration BEGIN statement finalprocedure 
            {
              InitProcedure RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InitProcedure(d,s);
                  parser.FINALOBJECT = RESULT;
                  parser.expected_token("IS");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // procedure ::= PROCEDURE error IS declaration BEGIN statement finalprocedure 
            {
              InitProcedure RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InitProcedure(d,s);
                  parser.FINALOBJECT = RESULT;
                  parser.expected_token("ID");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // procedure ::= error ID IS declaration BEGIN statement finalprocedure 
            {
              InitProcedure RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InitProcedure(d,s);
                  parser.FINALOBJECT = RESULT;
                  parser.expected_token("PROCEDURE");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= procedure EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InitProcedure start_val = (InitProcedure)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // procedure ::= PROCEDURE ID IS declaration BEGIN statement finalprocedure 
            {
              InitProcedure RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InitProcedure(d,s);
                  parser.FINALOBJECT = RESULT;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

