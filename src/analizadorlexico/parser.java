
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 24 20:55:08 CDT 2016
//----------------------------------------------------

package analizadorlexico;

import java_cup.runtime.*;
import analizadorlexico.AST.*;
import analizadorlexico.AST.Declaration.*;
import analizadorlexico.AST.Statement.*;
import analizadorlexico.AST.Primary.*;
import analizadorlexico.AST.Expression.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 24 20:55:08 CDT 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\011\000\002\002\004\000\002\002" +
    "\011\000\002\002\011\000\002\002\011\000\002\040\005" +
    "\000\002\040\005\000\002\040\005\000\002\021\004\000" +
    "\002\021\002\000\002\024\004\000\002\024\014\000\002" +
    "\024\016\000\002\037\005\000\002\037\002\000\002\036" +
    "\005\000\002\036\005\000\002\036\003\000\002\036\003" +
    "\000\002\022\006\000\002\022\006\000\002\022\007\000" +
    "\002\023\006\000\002\023\005\000\002\023\011\000\002" +
    "\035\003\000\002\035\002\000\002\004\004\000\002\004" +
    "\002\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\005\000\002\012\003\000\002\012\003\000\002" +
    "\016\004\000\002\034\003\000\002\026\002\000\002\027" +
    "\005\000\002\027\003\000\002\030\005\000\002\030\003" +
    "\000\002\031\005\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\033" +
    "\005\000\002\032\005\000\002\032\005\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\003\005\000\002\003\005\000\002" +
    "\017\005\000\002\017\003\000\002\020\003\000\002\020" +
    "\002\000\002\005\011\000\002\006\007\000\002\006\004" +
    "\000\002\006\002\000\002\007\010\000\002\013\007\000" +
    "\002\013\002\000\002\010\010\000\002\011\010\000\002" +
    "\014\006\000\002\014\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\006\003\005\004\004\001\002\000\006\003" +
    "\265\047\264\001\002\000\004\047\010\001\002\000\004" +
    "\002\007\001\002\000\004\002\000\001\002\000\004\005" +
    "\011\001\002\000\012\004\014\006\ufff8\035\016\047\013" +
    "\001\002\000\004\014\263\001\002\000\006\030\262\033" +
    "\216\001\002\000\004\047\251\001\002\000\012\004\014" +
    "\006\ufff8\035\016\047\013\001\002\000\004\047\204\001" +
    "\002\000\004\006\020\001\002\000\026\003\036\007\uffe5" +
    "\010\032\016\026\022\041\026\023\040\024\042\037\047" +
    "\030\050\031\001\002\000\034\003\uffdd\007\uffdd\010\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\022\uffdd\026\uffdd\032\uffdd\040" +
    "\uffdd\042\uffdd\047\uffdd\050\uffdd\001\002\000\004\007\175" +
    "\001\002\000\016\012\062\047\057\050\031\051\054\057" +
    "\051\060\050\001\002\000\016\012\062\047\057\050\031" +
    "\051\054\057\051\060\050\001\002\000\004\014\165\001" +
    "\002\000\016\012\062\047\057\050\031\051\054\057\051" +
    "\060\050\001\002\000\004\014\146\001\002\000\010\003" +
    "\120\012\102\027\121\001\002\000\004\012\143\001\002" +
    "\000\004\014\142\001\002\000\034\003\036\007\uffe5\010" +
    "\032\016\026\017\uffe5\020\uffe5\022\041\026\023\032\uffe5" +
    "\040\024\042\037\047\030\050\031\001\002\000\004\014" +
    "\140\001\002\000\004\014\137\001\002\000\034\003\uffdc" +
    "\007\uffdc\010\uffdc\016\uffdc\017\uffdc\020\uffdc\022\uffdc\026" +
    "\uffdc\032\uffdc\040\uffdc\042\uffdc\047\uffdc\050\uffdc\001\002" +
    "\000\014\047\110\050\031\051\107\057\105\060\103\001" +
    "\002\000\004\014\124\001\002\000\004\047\044\001\002" +
    "\000\004\014\043\001\002\000\034\003\uffe4\007\uffe4\010" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4\026\uffe4\032\uffe4" +
    "\040\uffe4\042\uffe4\047\uffe4\050\uffe4\001\002\000\006\003" +
    "\120\027\121\001\002\000\004\046\046\001\002\000\016" +
    "\012\062\047\057\050\031\051\054\057\051\060\050\001" +
    "\002\000\026\007\uffd5\013\uffd5\014\uffd5\021\uffd5\025\uffd5" +
    "\046\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\001\002\000" +
    "\026\007\uffd3\013\uffd3\014\uffd3\021\uffd3\025\uffd3\046\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\055\uffd3\001\002\000\022\007" +
    "\uffcd\013\uffcd\014\uffcd\021\uffcd\025\uffcd\046\uffcd\054\uffcd" +
    "\055\uffcd\001\002\000\026\007\uffd1\013\uffd1\014\uffd1\021" +
    "\uffd1\025\uffd1\046\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\001\002\000\024\007\uffce\013\uffce\014\uffce\021\uffce\025" +
    "\uffce\046\uffce\052\073\054\uffce\055\uffce\001\002\000\022" +
    "\007\uffcc\013\uffcc\014\uffcc\021\uffcc\025\uffcc\046\uffcc\054" +
    "\uffcc\055\uffcc\001\002\000\022\007\uffcf\013\uffcf\014\uffcf" +
    "\021\uffcf\025\uffcf\046\uffcf\054\uffcf\055\uffcf\001\002\000" +
    "\010\007\116\054\067\055\066\001\002\000\030\007\uffd2" +
    "\012\102\013\uffd2\014\uffd2\021\uffd2\025\uffd2\046\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\001\002\000\022\007\uffd0" +
    "\013\uffd0\014\uffd0\021\uffd0\025\uffd0\046\uffd0\054\uffd0\055" +
    "\uffd0\001\002\000\026\007\uffd7\013\uffd7\014\uffd7\021\uffd7" +
    "\025\uffd7\046\uffd7\052\uffd7\053\077\054\uffd7\055\uffd7\001" +
    "\002\000\016\012\062\047\057\050\031\051\054\057\051" +
    "\060\050\001\002\000\012\013\074\052\073\054\uffce\055" +
    "\uffce\001\002\000\010\013\072\054\uffcf\055\uffcf\001\002" +
    "\000\006\054\067\055\066\001\002\000\016\012\062\047" +
    "\057\050\031\051\054\057\051\060\050\001\002\000\016" +
    "\012\062\047\057\050\031\051\054\057\051\060\050\001" +
    "\002\000\022\007\uffcb\013\uffcb\014\uffcb\021\uffcb\025\uffcb" +
    "\046\uffcb\054\uffcb\055\uffcb\001\002\000\022\007\uffca\013" +
    "\uffca\014\uffca\021\uffca\025\uffca\046\uffca\054\067\055\uffca" +
    "\001\002\000\022\007\uffc9\013\uffc9\014\uffc9\021\uffc9\025" +
    "\uffc9\046\uffc9\054\uffc9\055\uffc9\001\002\000\012\012\075" +
    "\047\057\050\031\060\050\001\002\000\026\007\uffd4\013" +
    "\uffd4\014\uffd4\021\uffd4\025\uffd4\046\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\055\uffd4\001\002\000\012\012\075\047\057\050" +
    "\031\060\050\001\002\000\026\007\uffd8\013\uffd8\014\uffd8" +
    "\021\uffd8\025\uffd8\046\uffd8\052\uffd8\053\077\054\uffd8\055" +
    "\uffd8\001\002\000\012\012\075\047\057\050\031\060\050" +
    "\001\002\000\026\007\uffd6\013\uffd6\014\uffd6\021\uffd6\025" +
    "\uffd6\046\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\001\002" +
    "\000\006\013\074\052\073\001\002\000\016\013\uffbe\047" +
    "\110\050\031\051\107\057\105\060\103\001\002\000\012" +
    "\005\uffc7\013\uffc7\033\uffc7\043\uffc7\001\002\000\006\013" +
    "\uffc0\033\114\001\002\000\012\005\uffc8\013\uffc8\033\uffc8" +
    "\043\uffc8\001\002\000\012\005\uffc4\013\uffc4\033\uffc4\043" +
    "\uffc4\001\002\000\012\005\uffc6\013\uffc6\033\uffc6\043\uffc6" +
    "\001\002\000\014\005\uffc5\012\102\013\uffc5\033\uffc5\043" +
    "\uffc5\001\002\000\004\013\uffbf\001\002\000\004\013\113" +
    "\001\002\000\034\005\uffb4\007\uffb4\013\uffb4\014\uffb4\021" +
    "\uffb4\025\uffb4\033\uffb4\043\uffb4\046\uffb4\052\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\001\002\000\014\047\110\050\031\051" +
    "\107\057\105\060\103\001\002\000\004\013\uffc1\001\002" +
    "\000\004\022\117\001\002\000\004\014\uffb5\001\002\000" +
    "\016\012\062\047\057\050\031\051\054\057\051\060\050" +
    "\001\002\000\016\012\062\047\057\050\031\051\054\057" +
    "\051\060\050\001\002\000\012\014\uffc3\046\uffc3\054\067" +
    "\055\066\001\002\000\012\014\uffc2\046\uffc2\054\067\055" +
    "\066\001\002\000\034\003\uffdf\007\uffdf\010\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\022\uffdf\026\uffdf\032\uffdf\040\uffdf\042" +
    "\uffdf\047\uffdf\050\uffdf\001\002\000\004\005\126\001\002" +
    "\000\006\007\uffb7\032\130\001\002\000\004\007\135\001" +
    "\002\000\014\047\110\050\031\051\107\057\105\060\103" +
    "\001\002\000\004\043\132\001\002\000\030\003\036\007" +
    "\uffe5\010\032\016\026\022\041\026\023\032\uffe5\040\024" +
    "\042\037\047\030\050\031\001\002\000\006\007\uffb7\032" +
    "\130\001\002\000\004\007\uffb8\001\002\000\004\042\136" +
    "\001\002\000\004\014\uffb9\001\002\000\034\003\uffe0\007" +
    "\uffe0\010\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0\026\uffe0" +
    "\032\uffe0\040\uffe0\042\uffe0\047\uffe0\050\uffe0\001\002\000" +
    "\034\003\uffe2\007\uffe2\010\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\022\uffe2\026\uffe2\032\uffe2\040\uffe2\042\uffe2\047\uffe2\050" +
    "\uffe2\001\002\000\012\007\uffe6\017\uffe6\020\uffe6\032\uffe6" +
    "\001\002\000\034\003\uffe3\007\uffe3\010\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\022\uffe3\026\uffe3\032\uffe3\040\uffe3\042\uffe3" +
    "\047\uffe3\050\uffe3\001\002\000\016\013\uffbe\047\110\050" +
    "\031\051\107\057\105\060\103\001\002\000\004\013\145" +
    "\001\002\000\034\005\uffb3\007\uffb3\013\uffb3\014\uffb3\021" +
    "\uffb3\025\uffb3\033\uffb3\043\uffb3\046\uffb3\052\uffb3\053\uffb3" +
    "\054\uffb3\055\uffb3\001\002\000\034\003\uffe1\007\uffe1\010" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\022\uffe1\026\uffe1\032\uffe1" +
    "\040\uffe1\042\uffe1\047\uffe1\050\uffe1\001\002\000\004\021" +
    "\151\001\002\000\012\021\uffda\025\uffda\054\067\055\066" +
    "\001\002\000\032\003\036\007\uffe5\010\032\016\026\017" +
    "\uffe5\020\uffe5\022\041\026\023\040\024\042\037\047\030" +
    "\050\031\001\002\000\010\007\uffba\017\154\020\153\001" +
    "\002\000\016\012\062\047\057\050\031\051\054\057\051" +
    "\060\050\001\002\000\026\003\036\007\uffe5\010\032\016" +
    "\026\022\041\026\023\040\024\042\037\047\030\050\031" +
    "\001\002\000\004\007\156\001\002\000\004\016\157\001" +
    "\002\000\004\014\uffbd\001\002\000\004\007\uffbb\001\002" +
    "\000\004\021\162\001\002\000\032\003\036\007\uffe5\010" +
    "\032\016\026\017\uffe5\020\uffe5\022\041\026\023\040\024" +
    "\042\037\047\030\050\031\001\002\000\010\007\uffba\017" +
    "\154\020\153\001\002\000\004\007\uffbc\001\002\000\034" +
    "\003\uffdb\007\uffdb\010\uffdb\016\uffdb\017\uffdb\020\uffdb\022" +
    "\uffdb\026\uffdb\032\uffdb\040\uffdb\042\uffdb\047\uffdb\050\uffdb" +
    "\001\002\000\010\014\167\054\067\055\066\001\002\000" +
    "\034\003\uffde\007\uffde\010\uffde\016\uffde\017\uffde\020\uffde" +
    "\022\uffde\026\uffde\032\uffde\040\uffde\042\uffde\047\uffde\050" +
    "\uffde\001\002\000\004\025\171\001\002\000\026\003\036" +
    "\007\uffe5\010\032\016\026\022\041\026\023\040\024\042" +
    "\037\047\030\050\031\001\002\000\004\007\173\001\002" +
    "\000\004\025\174\001\002\000\004\014\uffb6\001\002\000" +
    "\006\003\200\047\177\001\002\000\004\002\uffff\001\002" +
    "\000\006\003\202\014\203\001\002\000\004\014\201\001" +
    "\002\000\004\002\ufffb\001\002\000\004\002\ufffa\001\002" +
    "\000\004\002\ufffc\001\002\000\006\012\206\040\ufff3\001" +
    "\002\000\004\040\237\001\002\000\004\047\210\001\002" +
    "\000\006\013\ufff0\014\235\001\002\000\006\030\217\033" +
    "\216\001\002\000\006\013\uffef\014\214\001\002\000\004" +
    "\013\213\001\002\000\006\005\ufff4\040\ufff4\001\002\000" +
    "\004\047\210\001\002\000\004\013\ufff1\001\002\000\004" +
    "\047\013\001\002\000\012\023\221\024\220\034\222\056" +
    "\uffe7\001\002\000\004\056\233\001\002\000\006\024\230" +
    "\056\231\001\002\000\004\056\uffe8\001\002\000\004\056" +
    "\224\001\002\000\010\013\uffeb\014\uffeb\027\225\001\002" +
    "\000\016\012\062\047\057\050\031\051\054\057\051\060" +
    "\050\001\002\000\010\014\227\054\067\055\066\001\002" +
    "\000\006\013\uffe9\014\uffe9\001\002\000\004\056\232\001" +
    "\002\000\006\013\uffee\014\uffee\001\002\000\006\013\uffec" +
    "\014\uffec\001\002\000\006\013\uffed\014\uffed\001\002\000" +
    "\006\013\uffea\014\uffea\001\002\000\004\047\210\001\002" +
    "\000\004\013\ufff2\001\002\000\004\056\240\001\002\000" +
    "\004\005\241\001\002\000\012\004\014\006\ufff8\035\016" +
    "\047\013\001\002\000\004\006\243\001\002\000\026\003" +
    "\036\007\uffe5\010\032\016\026\022\041\026\023\040\024" +
    "\042\037\047\030\050\031\001\002\000\004\007\245\001" +
    "\002\000\004\047\246\001\002\000\004\014\247\001\002" +
    "\000\012\004\ufff5\006\ufff5\035\ufff5\047\ufff5\001\002\000" +
    "\004\006\ufff9\001\002\000\006\005\ufff3\012\206\001\002" +
    "\000\004\005\253\001\002\000\012\004\014\006\ufff8\035" +
    "\016\047\013\001\002\000\004\006\255\001\002\000\026" +
    "\003\036\007\uffe5\010\032\016\026\022\041\026\023\040" +
    "\024\042\037\047\030\050\031\001\002\000\004\007\257" +
    "\001\002\000\004\047\260\001\002\000\004\014\261\001" +
    "\002\000\012\004\ufff6\006\ufff6\035\ufff6\047\ufff6\001\002" +
    "\000\006\034\222\056\uffe7\001\002\000\012\004\ufff7\006" +
    "\ufff7\035\ufff7\047\ufff7\001\002\000\006\003\273\005\274" +
    "\001\002\000\004\005\266\001\002\000\012\004\014\006" +
    "\ufff8\035\016\047\013\001\002\000\004\006\270\001\002" +
    "\000\026\003\036\007\uffe5\010\032\016\026\022\041\026" +
    "\023\040\024\042\037\047\030\050\031\001\002\000\004" +
    "\007\175\001\002\000\004\002\ufffe\001\002\000\012\004" +
    "\014\006\ufff8\035\016\047\013\001\002\000\012\004\014" +
    "\006\ufff8\035\016\047\013\001\002\000\004\006\276\001" +
    "\002\000\026\003\036\007\uffe5\010\032\016\026\022\041" +
    "\026\023\040\024\042\037\047\030\050\031\001\002\000" +
    "\004\007\175\001\002\000\004\002\001\001\002\000\004" +
    "\006\302\001\002\000\026\003\036\007\uffe5\010\032\016" +
    "\026\022\041\026\023\040\024\042\037\047\030\050\031" +
    "\001\002\000\004\007\175\001\002\000\004\002\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\016\023\011\024\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\247\023\011\024\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\041\004\021\005\033\007\026" +
    "\010\034\011\037\012\032\014\024\016\020\001\001\000" +
    "\002\001\001\000\004\040\175\001\001\000\022\014\051" +
    "\025\147\027\052\030\060\031\046\032\054\033\057\034" +
    "\167\001\001\000\020\014\051\025\165\027\052\030\060" +
    "\031\046\032\054\033\057\001\001\000\002\001\001\000" +
    "\022\014\051\025\147\027\052\030\060\031\046\032\054" +
    "\033\057\034\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\041" +
    "\004\140\005\033\007\026\010\034\011\037\012\032\014" +
    "\024\016\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\105\015\124\001\001\000" +
    "\002\001\001\000\004\003\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\014\051\025\055\027\052\030\060\031\046\032\054" +
    "\033\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\014\051" +
    "\025\064\027\062\030\060\031\046\032\063\033\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\051\025\070\027\052\030\060\031\046\032" +
    "\054\033\057\001\001\000\020\014\051\025\067\027\052" +
    "\030\060\031\046\032\054\033\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\051" +
    "\030\075\031\046\001\001\000\002\001\001\000\012\014" +
    "\051\027\100\030\060\031\046\001\001\000\002\001\001" +
    "\000\006\014\051\031\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\105\015\103\017\110\020\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\105\015\103\017\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\014\051\025" +
    "\122\027\052\030\060\031\046\032\054\033\057\001\001" +
    "\000\020\014\051\025\121\027\052\030\060\031\046\032" +
    "\054\033\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\126\001" +
    "\001\000\002\001\001\000\006\014\105\015\130\001\001" +
    "\000\002\001\001\000\024\003\041\004\132\005\033\007" +
    "\026\010\034\011\037\012\032\014\024\016\020\001\001" +
    "\000\004\013\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\105\015" +
    "\103\017\110\020\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\041\004\151\005\033\007\026\010\034" +
    "\011\037\012\032\014\024\016\020\001\001\000\004\006" +
    "\154\001\001\000\022\014\051\025\147\027\052\030\060" +
    "\031\046\032\054\033\057\034\160\001\001\000\024\003" +
    "\041\004\157\005\033\007\026\010\034\011\037\012\032" +
    "\014\024\016\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\041\004\162\005\033\007\026\010\034\011" +
    "\037\012\032\014\024\016\020\001\001\000\004\006\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\041" +
    "\004\171\005\033\007\026\010\034\011\037\012\032\014" +
    "\024\016\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\204\001\001\000" +
    "\002\001\001\000\010\022\210\023\206\036\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\210\023\206" +
    "\036\214\001\001\000\002\001\001\000\004\023\233\001" +
    "\001\000\004\035\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\014\051\025\225\027\052\030\060\031\046" +
    "\032\054\033\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\210\023" +
    "\206\036\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\021\241\023\011\024\014\001" +
    "\001\000\002\001\001\000\024\003\041\004\243\005\033" +
    "\007\026\010\034\011\037\012\032\014\024\016\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\251\001" +
    "\001\000\002\001\001\000\010\021\253\023\011\024\014" +
    "\001\001\000\002\001\001\000\024\003\041\004\255\005" +
    "\033\007\026\010\034\011\037\012\032\014\024\016\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\021" +
    "\266\023\011\024\014\001\001\000\002\001\001\000\024" +
    "\003\041\004\270\005\033\007\026\010\034\011\037\012" +
    "\032\014\024\016\020\001\001\000\004\040\271\001\001" +
    "\000\002\001\001\000\010\021\300\023\011\024\014\001" +
    "\001\000\010\021\274\023\011\024\014\001\001\000\002" +
    "\001\001\000\024\003\041\004\276\005\033\007\026\010" +
    "\034\011\037\012\032\014\024\016\020\001\001\000\004" +
    "\040\277\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\041\004\302\005\033\007\026\010\034\011\037" +
    "\012\032\014\024\016\020\001\001\000\004\040\303\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public InitProcedure FINALOBJECT;
    public void syntax_error(Symbol cur_token) {
        System.out.print("Syntax Error:");
        System.out.print(" line:" + cur_token.left);
        System.out.print(" column:" + cur_token.right);
        System.out.println();
    }


    public void expected_token(String token){
      System.out.print("Expected Token " + token);
      System.out.println();
    };


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // function_call ::= PUT OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS 
            {
              Primary RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListPrimary p = (ListPrimary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionCall(id,p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // function_call ::= ID OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS 
            {
              Primary RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListPrimary p = (ListPrimary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionCall(id,p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // for ::= FOR asignation TO expression END FOR 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ForStatement(a,null,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // while ::= WHILE condition LOOP statement END LOOP 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WhileStatement(c,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // case_a ::= 
            {
              CaseBody RESULT =null;
		RESULT = new CaseBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_a",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // case_a ::= WHEN primary CASEASIG statement case_a 
            {
              CaseBody RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Primary p = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseBody cb = (CaseBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CaseBody(p,s,cb); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_a",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // case ::= CASE primary IS case_a END CASE 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Primary p = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CaseBody cb = (CaseBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CaseStatement(p,cb); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if_a ::= 
            {
              Statement RESULT =null;
		 RESULT = new IfStatement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if_a ::= ELSE statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStatement(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if_a ::= ELSEIF condition THEN statement if_a 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement ef = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStatement(c,s,ef); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if ::= IF condition THEN statement if_a END IF 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement ef = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IfStatement(c,s,ef); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parameters ::= 
            {
              ListPrimary RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parameters ::= list_primary 
            {
              ListPrimary RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListPrimary lp = (ListPrimary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // list_primary ::= primary 
            {
              ListPrimary RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Primary p = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListPrimary(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_primary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // list_primary ::= primary COMMA list_primary 
            {
              ListPrimary RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Primary p = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListPrimary lp = (ListPrimary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListPrimary(p,lp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_primary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asignation ::= ID error expression 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new AsignationStatement(id,e); ;
                parser.expected_token(":=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // asignation ::= ID ASIGNATION expression 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignationStatement(id,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // primary ::= function_call 
            {
              Primary RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Primary fc = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // primary ::= ID 
            {
              Primary RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // primary ::= LITERAL_STRING 
            {
              Primary RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LiteralString(S);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // primary ::= LITERAL_INT 
            {
              Primary RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LiteralInt(Integer.parseInt(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // primary ::= LITERAL_BOOLEAN 
            {
              Primary RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LiteralBoolean(Boolean.parseBoolean(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condition_expression ::= OPEN_PARENTHESIS condition_expression CLOSE_PARENTHESIS 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condition_expression ::= expression CONDITION_ELEMENT expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionExpression(e,e1,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // relation_expression ::= expression RELATION_OPERATOR expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelationExpression(e,e1,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= LITERAL_STRING 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimaryExpression(new LiteralString(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= LITERAL_BOOLEAN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimaryExpression(new LiteralBoolean(Boolean.parseBoolean(e))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= mathematical_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= condition_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= relation_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parenthesis_operation ::= function_call 
            {
              Expression RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Primary fc = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new PrimaryExpression(fc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parenthesis_operation ::= ID 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimaryExpression(new ID(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parenthesis_operation ::= LITERAL_INT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimaryExpression(new LiteralInt(Integer.parseInt(i))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parenthesis_operation ::= OPEN_PARENTHESIS mathematical_expression CLOSE_PARENTHESIS 
            {
              Expression RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = me; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // mult_operation ::= parenthesis_operation 
            {
              Expression RESULT =null;
		int poleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int poright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression po = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = po; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_operation",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // mult_operation ::= mult_operation MULT_OPERATOR parenthesis_operation 
            {
              Expression RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression mo = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mult = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int poright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression po = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultExpression(mo,po,mult); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_operation",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // mathematical_expression ::= mult_operation 
            {
              Expression RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression mo = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = mo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathematical_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // mathematical_expression ::= mathematical_expression SUM_OPERATOR mult_operation 
            {
              Expression RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int soleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int soright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String so = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int me2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int me2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression me2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AddExpression(me,me2,so); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathematical_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simple_expression ::= 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condition ::= expression 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Condition(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_call_statement ::= function_call END_INSTRUCTION 
            {
              Primary RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Primary fc = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = fc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement_call ::= error 
            {
              Statement RESULT =null;
		parser.expected_token(";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_call",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement_call ::= function_call_statement 
            {
              Statement RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Primary fs = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionCallStatement(fs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_call",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement_call ::= RETURN expression END_INSTRUCTION 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStatement(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_call",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_call ::= for END_INSTRUCTION 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement f = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_call",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement_call ::= while END_INSTRUCTION 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement w = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_call",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement_call ::= case END_INSTRUCTION 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_call",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement_call ::= if END_INSTRUCTION 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_call",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement_call ::= NEW_LINE END_INSTRUCTION 
            {
              Statement RESULT =null;
		 RESULT = new NewLineStatement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_call",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement_call ::= asignation END_INSTRUCTION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_call",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= 
            {
              Statement RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= statement_call statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement sq = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SequenceStatement(s,sq); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // constant ::= 
            {
              Boolean RESULT =null;
		RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // constant ::= CONSTANT 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // simple_declaration ::= ID DECLARATION constant TYPE ASIGNATION expression END_INSTRUCTION 
            {
              Declaration RESULT =null;
		 /* LATER */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // simple_declaration ::= ID COMMA simple_declaration 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration sd = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleDeclaration(i,sd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // simple_declaration ::= ID DECLARATION constant TYPE 
            {
              Declaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleDeclaration(id,t,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // in_out_declaration ::= ID DECLARATION IN OUT TYPE 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InOutDeclaration(i,t,"IN OUT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // in_out_declaration ::= ID DECLARATION OUT TYPE 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InOutDeclaration(i,t,"OUT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // in_out_declaration ::= ID DECLARATION IN TYPE 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InOutDeclaration(i,t,"IN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_declaration_parameters ::= in_out_declaration 
            {
              ListDeclarationParameter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ListDeclarationParameter(d,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_declaration_parameters ::= simple_declaration 
            {
              ListDeclarationParameter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ListDeclarationParameter(d,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_declaration_parameters ::= in_out_declaration END_INSTRUCTION list_declaration_parameters 
            {
              ListDeclarationParameter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListDeclarationParameter lp = (ListDeclarationParameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ListDeclarationParameter(d,lp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list_declaration_parameters ::= simple_declaration END_INSTRUCTION list_declaration_parameters 
            {
              ListDeclarationParameter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListDeclarationParameter lp = (ListDeclarationParameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ListDeclarationParameter(d,lp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // input_parameters ::= 
            {
              ListDeclarationParameter RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_parameters",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // input_parameters ::= OPEN_PARENTHESIS list_declaration_parameters CLOSE_PARENTHESIS 
            {
              ListDeclarationParameter RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListDeclarationParameter lp = (ListDeclarationParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = lp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_parameters",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration_call ::= FUNCTION ID input_parameters RETURN TYPE IS declaration BEGIN statement END ID END_INSTRUCTION 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int ipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ListDeclarationParameter ip = (ListDeclarationParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionDeclaration(i,ip,d,s,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration_call ::= PROCEDURE ID input_parameters IS declaration BEGIN statement END ID END_INSTRUCTION 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ListDeclarationParameter ip = (ListDeclarationParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcedureDeclaration(i,ip,d,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration_call ::= simple_declaration END_INSTRUCTION 
            {
              Declaration RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaration s = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= 
            {
              Declaration RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= declaration_call declaration 
            {
              Declaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration sd = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SequenceDeclaration(d,sd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // finalprocedure ::= END ID error 
            {
              Object RESULT =null;
		parser.expected_token(";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("finalprocedure",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // finalprocedure ::= END error END_INSTRUCTION 
            {
              Object RESULT =null;
		parser.expected_token("id");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("finalprocedure",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // finalprocedure ::= END ID END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finalprocedure",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // procedure ::= PROCEDURE ID error declaration BEGIN statement finalprocedure 
            {
              InitProcedure RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InitProcedure(d,s);
                  parser.FINALOBJECT = RESULT;
                  parser.expected_token("IS");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // procedure ::= PROCEDURE error IS declaration BEGIN statement finalprocedure 
            {
              InitProcedure RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InitProcedure(d,s);
                  parser.FINALOBJECT = RESULT;
                  parser.expected_token("ID");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // procedure ::= error ID IS declaration BEGIN statement finalprocedure 
            {
              InitProcedure RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InitProcedure(d,s);
                  parser.FINALOBJECT = RESULT;
                  parser.expected_token("PROCEDURE");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= procedure EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InitProcedure start_val = (InitProcedure)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // procedure ::= PROCEDURE ID IS declaration BEGIN statement finalprocedure 
            {
              InitProcedure RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InitProcedure(d,s);
                  parser.FINALOBJECT = RESULT;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

