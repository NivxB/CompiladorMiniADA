
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 16 23:27:09 CST 2016
//----------------------------------------------------

package analizadorlexico;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 16 23:27:09 CST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\014\000\002\002\004\000\002\002" +
    "\002\000\002\010\005\000\002\010\010\000\002\010\012" +
    "\000\002\010\002\000\002\030\005\000\002\030\002\000" +
    "\002\017\004\000\002\017\004\000\002\017\003\000\002" +
    "\017\003\000\002\020\006\000\002\020\006\000\002\020" +
    "\007\000\002\031\006\000\002\031\005\000\002\031\011" +
    "\000\002\032\010\000\002\032\002\000\002\012\003\000" +
    "\002\012\002\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\006\000\002\004\005\000\002\004\002" +
    "\000\002\033\003\000\002\011\002\000\002\014\005\000" +
    "\002\014\003\000\002\015\005\000\002\015\003\000\002" +
    "\016\005\000\002\016\003\000\002\034\005\000\002\034" +
    "\005\000\002\034\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\003\005\000\002\006\005\000\002\006\003\000\002" +
    "\013\003\000\002\013\002\000\002\021\011\000\002\022" +
    "\007\000\002\022\004\000\002\022\002\000\002\023\006" +
    "\000\002\024\007\000\002\024\010\000\002\024\004\000" +
    "\002\025\010\000\002\026\012\000\002\027\003\000\002" +
    "\027\004\000\002\005\006\000\002\005\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\006\002\uffff\004\004\001\002\000\004\036" +
    "\007\001\002\000\004\002\006\001\002\000\004\002\000" +
    "\001\002\000\004\005\010\001\002\000\012\004\013\006" +
    "\ufffb\036\012\047\014\001\002\000\004\023\250\001\002" +
    "\000\006\040\247\043\207\001\002\000\004\036\242\001" +
    "\002\000\004\036\176\001\002\000\004\006\016\001\002" +
    "\000\024\007\uffe2\010\022\011\035\025\026\031\023\035" +
    "\021\036\030\052\034\054\032\001\002\000\004\023\174" +
    "\001\002\000\004\023\172\001\002\000\016\010\022\013" +
    "\051\021\042\022\040\036\050\044\045\001\002\000\004" +
    "\013\162\001\002\000\014\010\022\021\042\022\040\036" +
    "\050\044\045\001\002\000\004\023\147\001\002\000\004" +
    "\023\145\001\002\000\016\010\022\013\051\021\042\022" +
    "\040\036\050\044\045\001\002\000\004\023\126\001\002" +
    "\000\006\013\061\037\124\001\002\000\004\007\120\001" +
    "\002\000\016\010\022\013\051\021\042\022\040\036\050" +
    "\044\045\001\002\000\004\023\076\001\002\000\016\010" +
    "\022\013\051\021\042\022\040\036\050\044\045\001\002" +
    "\000\004\023\036\001\002\000\032\007\uffe2\010\022\011" +
    "\035\025\026\026\uffe2\027\uffe2\031\023\035\021\036\030" +
    "\042\uffe2\052\034\054\032\001\002\000\012\007\uffe9\026" +
    "\uffe9\027\uffe9\042\uffe9\001\002\000\032\005\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\023\uffd5\030\uffd5\032\uffd5\034" +
    "\uffd5\043\uffd5\045\uffd5\055\uffd5\001\002\000\024\005\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\023\uffdc\030\uffdc\034" +
    "\uffdc\045\uffdc\001\002\000\032\005\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\023\uffd6\030\uffd6\032\uffd6\034\uffd6\043" +
    "\uffd6\045\uffd6\055\uffd6\001\002\000\024\005\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\023\uffda\030\uffda\034\uffda\045" +
    "\uffda\001\002\000\032\005\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\023\uffd2\030\uffd2\032\uffd2\034\uffd2\043\uffd2\045" +
    "\uffd2\055\uffd2\001\002\000\032\005\uffd4\014\uffd4\015\uffd4" +
    "\016\uffd4\017\uffd4\023\uffd4\030\uffd4\032\uffd4\034\uffd4\043" +
    "\uffd4\045\uffd4\055\uffd4\001\002\000\020\005\uffd7\015\056" +
    "\017\uffd7\023\uffd7\030\uffd7\034\uffd7\045\uffd7\001\002\000" +
    "\010\017\071\023\072\045\070\001\002\000\034\005\uffd3" +
    "\013\061\014\uffd3\015\uffd3\016\uffd3\017\uffd3\023\uffd3\030" +
    "\uffd3\032\uffd3\034\uffd3\043\uffd3\045\uffd3\055\uffd3\001\002" +
    "\000\016\010\022\013\051\021\042\022\040\036\050\044" +
    "\045\001\002\000\024\005\uffde\014\uffde\015\uffde\016\053" +
    "\017\uffde\023\uffde\030\uffde\034\uffde\045\uffde\001\002\000" +
    "\016\010\022\013\051\021\042\022\040\036\050\044\045" +
    "\001\002\000\024\005\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\023\uffdd\030\uffdd\034\uffdd\045\uffdd\001\002\000\006" +
    "\014\057\015\056\001\002\000\016\010\022\013\051\021" +
    "\042\022\040\036\050\044\045\001\002\000\024\005\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\023\uffdb\030\uffdb\034" +
    "\uffdb\045\uffdb\001\002\000\024\005\uffdf\014\uffdf\015\uffdf" +
    "\016\053\017\uffdf\023\uffdf\030\uffdf\034\uffdf\045\uffdf\001" +
    "\002\000\016\010\022\014\uffcd\021\042\022\040\036\050" +
    "\044\045\001\002\000\006\014\uffcf\043\066\001\002\000" +
    "\004\014\uffce\001\002\000\004\014\065\001\002\000\032" +
    "\005\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\023\uffc0\030" +
    "\uffc0\032\uffc0\034\uffc0\043\uffc0\045\uffc0\055\uffc0\001\002" +
    "\000\014\010\022\021\042\022\040\036\050\044\045\001" +
    "\002\000\004\014\uffd0\001\002\000\016\010\022\013\051" +
    "\021\042\022\040\036\050\044\045\001\002\000\016\010" +
    "\022\013\051\021\042\022\040\036\050\044\045\001\002" +
    "\000\032\007\uffe2\010\022\011\035\025\026\026\uffe2\027" +
    "\uffe2\031\023\035\021\036\030\042\uffe2\052\034\054\032" +
    "\001\002\000\012\007\uffe4\026\uffe4\027\uffe4\042\uffe4\001" +
    "\002\000\016\005\uffd8\017\uffd8\023\uffd8\030\uffd8\034\uffd8" +
    "\045\uffd8\001\002\000\016\005\uffd9\017\071\023\uffd9\030" +
    "\uffd9\034\uffd9\045\uffd9\001\002\000\032\007\uffe2\010\022" +
    "\011\035\025\026\026\uffe2\027\uffe2\031\023\035\021\036" +
    "\030\042\uffe2\052\034\054\032\001\002\000\012\007\uffe7" +
    "\026\uffe7\027\uffe7\042\uffe7\001\002\000\004\005\102\001" +
    "\002\000\014\005\uffe1\017\071\030\uffe1\034\uffe1\045\070" +
    "\001\002\000\006\007\105\042\104\001\002\000\004\023" +
    "\uffc8\001\002\000\016\010\022\021\042\022\040\036\050" +
    "\044\045\057\110\001\002\000\004\054\106\001\002\000" +
    "\004\023\uffc5\001\002\000\004\055\115\001\002\000\004" +
    "\055\111\001\002\000\024\007\uffe2\010\022\011\035\025" +
    "\026\031\023\035\021\036\030\052\034\054\032\001\002" +
    "\000\004\007\113\001\002\000\004\054\114\001\002\000" +
    "\004\023\uffc6\001\002\000\026\007\uffe2\010\022\011\035" +
    "\025\026\031\023\035\021\036\030\042\uffe2\052\034\054" +
    "\032\001\002\000\006\007\105\042\104\001\002\000\004" +
    "\023\uffc7\001\002\000\004\036\121\001\002\000\004\023" +
    "\122\001\002\000\006\002\uffff\004\004\001\002\000\004" +
    "\002\001\001\002\000\016\010\022\013\051\021\042\022" +
    "\040\036\050\044\045\001\002\000\010\017\071\023\uffd1" +
    "\045\070\001\002\000\032\007\uffe2\010\022\011\035\025" +
    "\026\026\uffe2\027\uffe2\031\023\035\021\036\030\042\uffe2" +
    "\052\034\054\032\001\002\000\012\007\uffe5\026\uffe5\027" +
    "\uffe5\042\uffe5\001\002\000\004\030\131\001\002\000\030" +
    "\007\uffe2\010\022\011\035\025\026\026\uffe2\027\uffe2\031" +
    "\023\035\021\036\030\052\034\054\032\001\002\000\010" +
    "\007\uffc9\026\133\027\134\001\002\000\024\007\uffe2\010" +
    "\022\011\035\025\026\031\023\035\021\036\030\052\034" +
    "\054\032\001\002\000\016\010\022\013\051\021\042\022" +
    "\040\036\050\044\045\001\002\000\004\007\136\001\002" +
    "\000\004\025\137\001\002\000\004\023\uffcc\001\002\000" +
    "\004\030\141\001\002\000\030\007\uffe2\010\022\011\035" +
    "\025\026\026\uffe2\027\uffe2\031\023\035\021\036\030\052" +
    "\034\054\032\001\002\000\010\007\uffc9\026\133\027\134" +
    "\001\002\000\004\007\uffcb\001\002\000\004\007\uffca\001" +
    "\002\000\032\007\uffe2\010\022\011\035\025\026\026\uffe2" +
    "\027\uffe2\031\023\035\021\036\030\042\uffe2\052\034\054" +
    "\032\001\002\000\012\007\uffe3\026\uffe3\027\uffe3\042\uffe3" +
    "\001\002\000\032\007\uffe2\010\022\011\035\025\026\026" +
    "\uffe2\027\uffe2\031\023\035\021\036\030\042\uffe2\052\034" +
    "\054\032\001\002\000\012\007\uffe6\026\uffe6\027\uffe6\042" +
    "\uffe6\001\002\000\004\032\153\001\002\000\004\022\155" +
    "\001\002\000\006\022\uffc2\056\154\001\002\000\004\022" +
    "\uffc1\001\002\000\004\034\156\001\002\000\024\007\uffe2" +
    "\010\022\011\035\025\026\031\023\035\021\036\030\052" +
    "\034\054\032\001\002\000\004\007\160\001\002\000\004" +
    "\034\161\001\002\000\004\023\uffc3\001\002\000\016\010" +
    "\022\014\uffcd\021\042\022\040\036\050\044\045\001\002" +
    "\000\004\014\164\001\002\000\032\005\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\023\uffbf\030\uffbf\032\uffbf\034\uffbf" +
    "\043\uffbf\045\uffbf\055\uffbf\001\002\000\004\034\166\001" +
    "\002\000\024\007\uffe2\010\022\011\035\025\026\031\023" +
    "\035\021\036\030\052\034\054\032\001\002\000\004\007" +
    "\170\001\002\000\004\034\171\001\002\000\004\023\uffc4" +
    "\001\002\000\032\007\uffe2\010\022\011\035\025\026\026" +
    "\uffe2\027\uffe2\031\023\035\021\036\030\042\uffe2\052\034" +
    "\054\032\001\002\000\012\007\uffea\026\uffea\027\uffea\042" +
    "\uffea\001\002\000\032\007\uffe2\010\022\011\035\025\026" +
    "\026\uffe2\027\uffe2\031\023\035\021\036\030\042\uffe2\052" +
    "\034\054\032\001\002\000\012\007\uffe8\026\uffe8\027\uffe8" +
    "\042\uffe8\001\002\000\006\013\200\052\ufff9\001\002\000" +
    "\004\052\227\001\002\000\004\036\202\001\002\000\006" +
    "\014\ufff6\036\202\001\002\000\006\040\210\043\207\001" +
    "\002\000\006\014\ufff5\036\202\001\002\000\004\014\205" +
    "\001\002\000\010\005\ufffa\023\ufffa\052\ufffa\001\002\000" +
    "\004\014\ufff7\001\002\000\004\036\012\001\002\000\012" +
    "\020\uffeb\032\212\033\211\046\213\001\002\000\004\020" +
    "\224\001\002\000\006\020\222\033\221\001\002\000\004" +
    "\020\uffec\001\002\000\004\020\215\001\002\000\012\014" +
    "\ufff1\023\ufff1\036\ufff1\037\216\001\002\000\016\010\022" +
    "\013\051\021\042\022\040\036\050\044\045\001\002\000" +
    "\010\017\071\023\220\045\070\001\002\000\010\014\uffef" +
    "\023\uffef\036\uffef\001\002\000\004\020\223\001\002\000" +
    "\006\014\ufff4\036\ufff4\001\002\000\006\014\ufff2\036\ufff2" +
    "\001\002\000\006\014\ufff3\036\ufff3\001\002\000\010\014" +
    "\ufff0\023\ufff0\036\ufff0\001\002\000\004\014\ufff8\001\002" +
    "\000\004\020\230\001\002\000\006\005\231\023\uffed\001" +
    "\002\000\012\004\013\006\ufffb\036\012\047\014\001\002" +
    "\000\004\023\233\001\002\000\012\004\013\006\ufffb\036" +
    "\012\047\014\001\002\000\004\006\ufffc\001\002\000\004" +
    "\006\236\001\002\000\024\007\uffe2\010\022\011\035\025" +
    "\026\031\023\035\021\036\030\052\034\054\032\001\002" +
    "\000\004\007\240\001\002\000\004\036\241\001\002\000" +
    "\004\023\uffee\001\002\000\010\005\ufff9\013\200\023\ufff9" +
    "\001\002\000\006\005\231\023\uffed\001\002\000\004\023" +
    "\245\001\002\000\012\004\013\006\ufffb\036\012\047\014" +
    "\001\002\000\004\006\ufffd\001\002\000\006\020\uffeb\046" +
    "\213\001\002\000\012\004\013\006\ufffb\036\012\047\014" +
    "\001\002\000\004\006\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\014\031\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\017\004\030\005\024\021\016\023\032\025" +
    "\023\026\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\043\007\042\014\045\015\051\016\040\033" +
    "\164\034\100\001\001\000\002\001\001\000\006\005\043" +
    "\007\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\043\007\042\014\045\015\051\016\040\033\127" +
    "\034\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\043\007\042\014\045\015\051" +
    "\016\040\033\077\034\100\001\001\000\002\001\001\000" +
    "\016\005\043\007\042\014\045\015\051\016\040\034\046" +
    "\001\001\000\002\001\001\000\020\003\017\004\036\005" +
    "\024\021\016\023\032\025\023\026\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\043\007\042\014\054\015\051\016\040\001\001" +
    "\000\002\001\001\000\010\005\043\007\042\016\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\043" +
    "\007\042\015\057\016\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\043\006\062\007\061\013\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\043\006\066\007\061" +
    "\001\001\000\002\001\001\000\016\005\043\007\042\014" +
    "\045\015\051\016\040\034\074\001\001\000\016\005\043" +
    "\007\042\014\045\015\051\016\040\034\073\001\001\000" +
    "\020\003\017\004\072\005\024\021\016\023\032\025\023" +
    "\026\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\017\004\076\005\024\021\016" +
    "\023\032\025\023\026\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\102\001\001" +
    "\000\002\001\001\000\006\005\043\007\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\017\004\111\005\024\021\016\023" +
    "\032\025\023\026\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\017\004\115\005" +
    "\024\021\016\023\032\025\023\026\026\001\001\000\004" +
    "\024\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\122\001\001\000\002\001\001" +
    "\000\016\005\043\007\042\014\045\015\051\016\040\034" +
    "\124\001\001\000\002\001\001\000\020\003\017\004\126" +
    "\005\024\021\016\023\032\025\023\026\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\017\004\131" +
    "\005\024\021\016\023\032\025\023\026\026\001\001\000" +
    "\004\022\134\001\001\000\020\003\017\004\143\005\024" +
    "\021\016\023\032\025\023\026\026\001\001\000\020\005" +
    "\043\007\042\014\045\015\051\016\040\033\137\034\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\017\004\141\005\024" +
    "\021\016\023\032\025\023\026\026\001\001\000\004\022" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\017\004\145\005\024\021\016\023\032\025\023\026" +
    "\026\001\001\000\002\001\001\000\020\003\017\004\147" +
    "\005\024\021\016\023\032\025\023\026\026\001\001\000" +
    "\002\001\001\000\004\027\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\017\004\156\005\024\021\016\023\032\025\023" +
    "\026\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\043\006\062\007\061\013\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\017\004\166\005\024\021\016\023\032" +
    "\025\023\026\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\017\004\172\005\024" +
    "\021\016\023\032\025\023\026\026\001\001\000\002\001" +
    "\001\000\020\003\017\004\174\005\024\021\016\023\032" +
    "\025\023\026\026\001\001\000\002\001\001\000\004\030" +
    "\176\001\001\000\002\001\001\000\010\017\203\020\202" +
    "\031\200\001\001\000\010\017\225\020\202\031\200\001" +
    "\001\000\002\001\001\000\010\017\205\020\202\031\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\224\001\001\000\004\012\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\043\007\042" +
    "\014\045\015\051\016\040\034\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\231\001\001" +
    "\000\006\010\234\031\010\001\001\000\002\001\001\000" +
    "\006\010\233\031\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\017\004\236\005\024\021\016\023" +
    "\032\025\023\026\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\242\001\001\000" +
    "\004\032\243\001\001\000\002\001\001\000\006\010\245" +
    "\031\010\001\001\000\002\001\001\000\004\012\213\001" +
    "\001\000\006\010\250\031\010\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    protected int error_sync_size () {
      System.out.println(":error_sync_size was called.");
      return 1;
    }
    public void syntax_error(Symbol cur_token){
        System.out.println("Token Value " + cur_token.value);
        System.out.println("Sym" + cur_token.sym);
        System.out.println("Parse State " + cur_token.parse_state);
        System.out.println("Left " + cur_token.left);


        report_error("Syntax error", null);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // function_call ::= PUT OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // function_call ::= ID OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // in ::= IN REVERSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // in ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // for ::= FOR variable in LITERAL_INT LOOP statement END LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // while ::= WHILE condition LOOP statement END LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // case_a ::= END CASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_a",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // case_a ::= WHEN OTHERS CASEASIG statement END CASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_a",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // case_a ::= WHEN variable CASEASIG statement case_a 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_a",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // case ::= CASE condition IS case_a 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // if_a ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // if_a ::= ELSE statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // if_a ::= ELSEIF condition THEN statement if_a 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // if ::= IF condition THEN statement if_a END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parameters ::= list_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list_variable ::= variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // list_variable ::= variable COMMA list_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // asignation ::= ID ASIGNATION expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variable ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variable ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // variable ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // variable ::= LITERAL_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variable ::= LITERAL_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= mathematical_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression RELATION_OPERATOR expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression CONDITION_ELEMENT expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parenthesis_operation ::= variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parenthesis_operation ::= OPEN_PARENTHESIS mathematical_expression CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mult_operation ::= parenthesis_operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_operation",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // mult_operation ::= mult_operation MULT_OPERATOR parenthesis_operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_operation",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mathematical_expression ::= mult_operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathematical_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mathematical_expression ::= mathematical_expression SUM_OPERATOR mult_operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathematical_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simple_expression ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condition ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= function_call END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= RETURN expression END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= for END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= while END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= case END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= if END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= NEW_LINE END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= asignation END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // constant ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // constant ::= CONSTANT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // body_declaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // body_declaration ::= IS declaration BEGIN statement END ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // simple_declaration ::= ID DECLARATION constant TYPE ASIGNATION expression END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // simple_declaration ::= ID COMMA simple_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simple_declaration ::= ID DECLARATION constant TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // in_out_declaration ::= ID DECLARATION IN OUT TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // in_out_declaration ::= ID DECLARATION OUT TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // in_out_declaration ::= ID DECLARATION IN TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list_declaration_parameters ::= in_out_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_declaration_parameters ::= simple_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list_declaration_parameters ::= in_out_declaration list_declaration_parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list_declaration_parameters ::= simple_declaration list_declaration_parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parameters_declaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parameters_declaration ::= OPEN_PARENTHESIS list_declaration_parameters CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= FUNCTION ID parameters_declaration RETURN TYPE body_declaration END_INSTRUCTION declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= PROCEDURE ID parameters_declaration body_declaration END_INSTRUCTION declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration ::= simple_declaration END_INSTRUCTION declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // procedure ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= procedure EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // procedure ::= PROCEDURE ID IS declaration BEGIN statement END ID END_INSTRUCTION procedure 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

