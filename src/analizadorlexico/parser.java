
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 16 07:20:38 CST 2016
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 16 07:20:38 CST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\014\000\002\002\004\000\002\002" +
    "\002\000\002\010\003\000\002\010\007\000\002\010\011" +
    "\000\002\030\005\000\002\030\002\000\002\017\004\000" +
    "\002\017\004\000\002\017\003\000\002\017\003\000\002" +
    "\020\007\000\002\020\007\000\002\020\010\000\002\031" +
    "\007\000\002\031\005\000\002\031\011\000\002\032\010" +
    "\000\002\032\002\000\002\012\003\000\002\012\002\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\002\000\002\033\003\000\002\011\003\000\002\011\003" +
    "\000\002\014\005\000\002\014\003\000\002\015\005\000" +
    "\002\015\003\000\002\016\005\000\002\016\003\000\002" +
    "\034\005\000\002\034\005\000\002\034\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\003\005\000\002\006\005\000\002\006\003\000" +
    "\002\013\003\000\002\013\002\000\002\021\010\000\002" +
    "\022\007\000\002\022\004\000\002\022\002\000\002\023" +
    "\006\000\002\024\007\000\002\024\006\000\002\024\003" +
    "\000\002\025\010\000\002\026\012\000\002\027\003\000" +
    "\002\027\004\000\002\005\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\006\002\uffff\004\004\001\002\000\004\036" +
    "\007\001\002\000\004\002\006\001\002\000\004\002\000" +
    "\001\002\000\004\005\010\001\002\000\010\004\013\036" +
    "\012\047\014\001\002\000\010\006\ufffe\014\ufffe\036\ufffe" +
    "\001\002\000\006\040\235\043\173\001\002\000\004\036" +
    "\231\001\002\000\004\036\162\001\002\000\004\006\016" +
    "\001\002\000\020\007\uffe5\011\031\025\024\031\022\035" +
    "\020\036\026\054\030\001\002\000\004\023\160\001\002" +
    "\000\014\013\053\021\043\022\037\036\051\044\045\001" +
    "\002\000\004\023\151\001\002\000\012\021\043\022\037" +
    "\036\055\044\045\001\002\000\004\023\136\001\002\000" +
    "\014\013\053\021\043\022\037\036\051\044\045\001\002" +
    "\000\004\023\120\001\002\000\004\037\116\001\002\000" +
    "\004\007\112\001\002\000\014\013\053\021\043\022\037" +
    "\036\051\044\045\001\002\000\004\023\035\001\002\000" +
    "\004\023\033\001\002\000\034\007\uffe5\011\031\025\024" +
    "\026\uffe5\027\uffe5\031\022\035\020\036\026\042\uffe5\054" +
    "\030\055\uffe5\056\uffe5\060\uffe5\001\002\000\020\007\uffe8" +
    "\026\uffe8\027\uffe8\042\uffe8\055\uffe8\056\uffe8\060\uffe8\001" +
    "\002\000\034\007\uffe5\011\031\025\024\026\uffe5\027\uffe5" +
    "\031\022\035\020\036\026\042\uffe5\054\030\055\uffe5\056" +
    "\uffe5\060\uffe5\001\002\000\020\007\uffea\026\uffea\027\uffea" +
    "\042\uffea\055\uffea\056\uffea\060\uffea\001\002\000\032\005" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\023\uffd7\030\uffd7" +
    "\032\uffd7\034\uffd7\043\uffd7\045\uffd7\057\uffd7\001\002\000" +
    "\024\005\uffde\014\uffde\015\uffde\016\uffde\017\uffde\023\uffde" +
    "\030\uffde\034\uffde\045\uffde\001\002\000\004\005\076\001" +
    "\002\000\024\005\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\023\uffdc\030\uffdc\034\uffdc\045\uffdc\001\002\000\032\005" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\023\uffd8\030\uffd8" +
    "\032\uffd8\034\uffd8\043\uffd8\045\uffd8\057\uffd8\001\002\000" +
    "\016\005\uffe3\017\uffe3\023\uffe3\030\uffe3\034\uffe3\045\uffe3" +
    "\001\002\000\032\005\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\023\uffd6\030\uffd6\032\uffd6\034\uffd6\043\uffd6\045\uffd6" +
    "\057\uffd6\001\002\000\020\005\uffe2\015\056\017\uffe2\023" +
    "\uffe2\030\uffe2\034\uffe2\045\uffe2\001\002\000\010\005\uffe4" +
    "\030\uffe4\034\uffe4\001\002\000\016\005\uffd9\017\073\023" +
    "\uffd9\030\uffd9\034\uffd9\045\072\001\002\000\024\005\uffd5" +
    "\013\063\015\uffd5\016\uffd5\017\uffd5\023\uffd5\030\uffd5\034" +
    "\uffd5\045\uffd5\001\002\000\024\005\uffe0\014\uffe0\015\uffe0" +
    "\016\061\017\uffe0\023\uffe0\030\uffe0\034\uffe0\045\uffe0\001" +
    "\002\000\014\013\053\021\043\022\037\036\055\044\045" +
    "\001\002\000\006\014\057\015\056\001\002\000\032\005" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\023\uffd5\030\uffd5" +
    "\032\uffd5\034\uffd5\043\uffd5\045\uffd5\057\uffd5\001\002\000" +
    "\014\013\053\021\043\022\037\036\055\044\045\001\002" +
    "\000\024\005\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\023" +
    "\uffdd\030\uffdd\034\uffdd\045\uffdd\001\002\000\024\005\uffe1" +
    "\014\uffe1\015\uffe1\016\061\017\uffe1\023\uffe1\030\uffe1\034" +
    "\uffe1\045\uffe1\001\002\000\014\013\053\021\043\022\037" +
    "\036\055\044\045\001\002\000\024\005\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\023\uffdf\030\uffdf\034\uffdf\045\uffdf" +
    "\001\002\000\014\014\uffd0\021\043\022\037\036\055\044" +
    "\045\001\002\000\004\014\uffd1\001\002\000\006\014\uffd2" +
    "\043\070\001\002\000\004\014\067\001\002\000\016\005" +
    "\uffc3\017\uffc3\023\uffc3\030\uffc3\034\uffc3\045\uffc3\001\002" +
    "\000\012\021\043\022\037\036\055\044\045\001\002\000" +
    "\004\014\uffd3\001\002\000\014\013\053\021\043\022\037" +
    "\036\051\044\045\001\002\000\014\013\053\021\043\022" +
    "\037\036\051\044\045\001\002\000\012\005\uffda\023\uffda" +
    "\030\uffda\034\uffda\001\002\000\012\005\uffdb\023\uffdb\030" +
    "\uffdb\034\uffdb\001\002\000\010\042\100\055\102\056\101" +
    "\001\002\000\004\023\uffcb\001\002\000\012\021\043\022" +
    "\037\036\055\044\045\001\002\000\004\023\uffc8\001\002" +
    "\000\004\057\103\001\002\000\020\011\031\025\024\031" +
    "\022\035\020\036\026\054\030\056\uffe5\001\002\000\004" +
    "\056\105\001\002\000\004\023\uffc9\001\002\000\004\057" +
    "\107\001\002\000\024\011\031\025\024\031\022\035\020" +
    "\036\026\042\uffe5\054\030\055\uffe5\056\uffe5\001\002\000" +
    "\010\042\100\055\102\056\101\001\002\000\004\023\uffca" +
    "\001\002\000\004\036\113\001\002\000\004\023\114\001" +
    "\002\000\006\002\uffff\004\004\001\002\000\004\002\001" +
    "\001\002\000\014\013\053\021\043\022\037\036\051\044" +
    "\045\001\002\000\004\023\uffd4\001\002\000\034\007\uffe5" +
    "\011\031\025\024\026\uffe5\027\uffe5\031\022\035\020\036" +
    "\026\042\uffe5\054\030\055\uffe5\056\uffe5\060\uffe5\001\002" +
    "\000\020\007\uffe6\026\uffe6\027\uffe6\042\uffe6\055\uffe6\056" +
    "\uffe6\060\uffe6\001\002\000\004\030\123\001\002\000\024" +
    "\011\031\025\024\026\uffe5\027\uffe5\031\022\035\020\036" +
    "\026\054\030\060\uffe5\001\002\000\010\026\126\027\125" +
    "\060\uffcc\001\002\000\014\013\053\021\043\022\037\036" +
    "\051\044\045\001\002\000\020\011\031\025\024\031\022" +
    "\035\020\036\026\054\030\060\uffe5\001\002\000\004\060" +
    "\130\001\002\000\004\023\uffcf\001\002\000\004\060\uffcd" +
    "\001\002\000\004\030\133\001\002\000\024\011\031\025" +
    "\024\026\uffe5\027\uffe5\031\022\035\020\036\026\054\030" +
    "\060\uffe5\001\002\000\010\026\126\027\125\060\uffcc\001" +
    "\002\000\004\060\uffce\001\002\000\034\007\uffe5\011\031" +
    "\025\024\026\uffe5\027\uffe5\031\022\035\020\036\026\042" +
    "\uffe5\054\030\055\uffe5\056\uffe5\060\uffe5\001\002\000\020" +
    "\007\uffe7\026\uffe7\027\uffe7\042\uffe7\055\uffe7\056\uffe7\060" +
    "\uffe7\001\002\000\004\032\142\001\002\000\004\022\144" +
    "\001\002\000\006\022\uffc5\061\143\001\002\000\004\022" +
    "\uffc4\001\002\000\004\034\145\001\002\000\020\007\uffe5" +
    "\011\031\025\024\031\022\035\020\036\026\054\030\001" +
    "\002\000\004\007\147\001\002\000\004\034\150\001\002" +
    "\000\004\023\uffc6\001\002\000\034\007\uffe5\011\031\025" +
    "\024\026\uffe5\027\uffe5\031\022\035\020\036\026\042\uffe5" +
    "\054\030\055\uffe5\056\uffe5\060\uffe5\001\002\000\020\007" +
    "\uffeb\026\uffeb\027\uffeb\042\uffeb\055\uffeb\056\uffeb\060\uffeb" +
    "\001\002\000\004\034\154\001\002\000\020\007\uffe5\011" +
    "\031\025\024\031\022\035\020\036\026\054\030\001\002" +
    "\000\004\007\156\001\002\000\004\034\157\001\002\000" +
    "\004\023\uffc7\001\002\000\034\007\uffe5\011\031\025\024" +
    "\026\uffe5\027\uffe5\031\022\035\020\036\026\042\uffe5\054" +
    "\030\055\uffe5\056\uffe5\060\uffe5\001\002\000\020\007\uffe9" +
    "\026\uffe9\027\uffe9\042\uffe9\055\uffe9\056\uffe9\060\uffe9\001" +
    "\002\000\006\013\164\052\ufffa\001\002\000\004\052\217" +
    "\001\002\000\004\036\166\001\002\000\006\014\ufff7\036" +
    "\166\001\002\000\006\040\174\043\173\001\002\000\006" +
    "\014\ufff6\036\166\001\002\000\004\014\171\001\002\000" +
    "\010\005\ufffb\023\ufffb\052\ufffb\001\002\000\004\014\ufff8" +
    "\001\002\000\010\004\013\036\012\047\014\001\002\000" +
    "\012\020\uffec\032\176\033\175\046\177\001\002\000\004" +
    "\020\213\001\002\000\006\020\207\033\206\001\002\000" +
    "\004\020\uffed\001\002\000\004\020\201\001\002\000\006" +
    "\023\203\037\202\001\002\000\014\013\053\021\043\022" +
    "\037\036\051\044\045\001\002\000\010\006\ufff2\014\ufff2" +
    "\036\ufff2\001\002\000\004\023\205\001\002\000\010\006" +
    "\ufff0\014\ufff0\036\ufff0\001\002\000\004\020\211\001\002" +
    "\000\004\023\210\001\002\000\006\014\ufff5\036\ufff5\001" +
    "\002\000\004\023\212\001\002\000\006\014\ufff3\036\ufff3" +
    "\001\002\000\004\023\214\001\002\000\006\014\ufff4\036" +
    "\ufff4\001\002\000\010\006\ufff1\014\ufff1\036\ufff1\001\002" +
    "\000\004\014\ufff9\001\002\000\004\020\220\001\002\000" +
    "\006\005\221\023\uffee\001\002\000\010\004\013\036\012" +
    "\047\014\001\002\000\004\023\223\001\002\000\010\006" +
    "\ufffc\014\ufffc\036\ufffc\001\002\000\004\006\225\001\002" +
    "\000\020\007\uffe5\011\031\025\024\031\022\035\020\036" +
    "\026\054\030\001\002\000\004\007\227\001\002\000\004" +
    "\036\230\001\002\000\004\023\uffef\001\002\000\010\005" +
    "\ufffa\013\164\023\ufffa\001\002\000\006\005\221\023\uffee" +
    "\001\002\000\004\023\234\001\002\000\010\006\ufffd\014" +
    "\ufffd\036\ufffd\001\002\000\006\020\uffec\046\177\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\014\031\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\020\004\026\021\016\023\031\025\022\026" +
    "\024\001\001\000\002\001\001\000\022\005\043\007\041" +
    "\011\047\014\045\015\051\016\037\033\152\034\046\001" +
    "\001\000\002\001\001\000\004\007\137\001\001\000\002" +
    "\001\001\000\022\005\043\007\041\011\047\014\045\015" +
    "\051\016\037\033\121\034\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\043\007" +
    "\041\011\047\014\045\015\051\016\037\033\040\034\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\020\004\033\021\016\023\031\025\022\026\024\001\001" +
    "\000\002\001\001\000\016\003\020\004\035\021\016\023" +
    "\031\025\022\026\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\041\014\053" +
    "\015\051\016\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\041\015\057\016\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\041\016\061\001" +
    "\001\000\002\001\001\000\010\006\063\007\064\013\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\070\007\064\001\001" +
    "\000\002\001\001\000\020\005\043\007\041\011\047\014" +
    "\045\015\051\016\037\034\074\001\001\000\020\005\043" +
    "\007\041\011\047\014\045\015\051\016\037\034\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\076" +
    "\001\001\000\002\001\001\000\004\007\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\020\004\103" +
    "\021\016\023\031\025\022\026\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\020" +
    "\004\107\021\016\023\031\025\022\026\024\001\001\000" +
    "\004\024\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\114\001\001\000\002\001" +
    "\001\000\020\005\043\007\041\011\047\014\045\015\051" +
    "\016\037\034\116\001\001\000\002\001\001\000\016\003" +
    "\020\004\120\021\016\023\031\025\022\026\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\020\004" +
    "\123\021\016\023\031\025\022\026\024\001\001\000\004" +
    "\022\126\001\001\000\022\005\043\007\041\011\047\014" +
    "\045\015\051\016\037\033\131\034\046\001\001\000\016" +
    "\003\020\004\130\021\016\023\031\025\022\026\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\020\004\133\021\016\023" +
    "\031\025\022\026\024\001\001\000\004\022\134\001\001" +
    "\000\002\001\001\000\016\003\020\004\136\021\016\023" +
    "\031\025\022\026\024\001\001\000\002\001\001\000\004" +
    "\027\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\020\004\145" +
    "\021\016\023\031\025\022\026\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\020" +
    "\004\151\021\016\023\031\025\022\026\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\020\004\154" +
    "\021\016\023\031\025\022\026\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\020" +
    "\004\160\021\016\023\031\025\022\026\024\001\001\000" +
    "\002\001\001\000\004\030\162\001\001\000\002\001\001" +
    "\000\010\017\167\020\166\031\164\001\001\000\010\017" +
    "\215\020\166\031\164\001\001\000\002\001\001\000\010" +
    "\017\171\020\166\031\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\214\031\010" +
    "\001\001\000\004\012\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\043\007\041\011\047\014\045\015" +
    "\051\016\037\034\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\221\001\001" +
    "\000\006\010\223\031\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\020\004\225" +
    "\021\016\023\031\025\022\026\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\231" +
    "\001\001\000\004\032\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\177\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // function_call ::= ID OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // in ::= IN REVERSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // in ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // for ::= FOR variable in LITERAL_INT LOOP statement END LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // while ::= WHILE condition LOOP statement END LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // case_a ::= ENDCASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_a",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // case_a ::= WHENOTHERS CASEASIG statement ENDCASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_a",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // case_a ::= WHEN variable CASEASIG statement case_a 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_a",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // case ::= CASE condition IS case_a 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // if_a ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // if_a ::= ELSE statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // if_a ::= ELSEIF condition THEN statement if_a 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if ::= IF condition THEN statement if_a ENDIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parameters ::= list_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // list_variable ::= variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // list_variable ::= variable COMMA list_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignation ::= ID ASIGNATION expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // variable ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variable ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variable ::= LITERAL_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variable ::= LITERAL_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= simple_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= simple_expression RELATION_OPERATOR expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= simple_expression CONDITION_ELEMENT expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parenthesis_operation ::= variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parenthesis_operation ::= OPEN_PARENTHESIS mathematical_expression CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mult_operation ::= parenthesis_operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_operation",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mult_operation ::= mult_operation MULT_OPERATOR parenthesis_operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_operation",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // mathematical_expression ::= mult_operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathematical_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // mathematical_expression ::= mathematical_expression SUM_OPERATOR mult_operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathematical_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // simple_expression ::= mathematical_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // simple_expression ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condition ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= for END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= while END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= case END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= if END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= NEW_LINE END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= asignation END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // constant ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // constant ::= CONSTANT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // body_declaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // body_declaration ::= IS declaration BEGIN statement END ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // simple_declaration ::= ID DECLARATION constant TYPE ASIGNATION expression END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simple_declaration ::= ID COMMA declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // simple_declaration ::= ID DECLARATION constant TYPE END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // in_out_declaration ::= ID DECLARATION IN OUT TYPE END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // in_out_declaration ::= ID DECLARATION OUT TYPE END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // in_out_declaration ::= ID DECLARATION IN TYPE END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_declaration_parameters ::= in_out_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list_declaration_parameters ::= simple_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list_declaration_parameters ::= in_out_declaration list_declaration_parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // list_declaration_parameters ::= simple_declaration list_declaration_parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parameters_declaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parameters_declaration ::= OPEN_PARENTHESIS list_declaration_parameters CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= FUNCTION ID parameters_declaration RETURN TYPE body_declaration END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= PROCEDURE ID parameters_declaration body_declaration END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration ::= simple_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // procedure ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= procedure EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // procedure ::= PROCEDURE ID IS declaration BEGIN statement END ID END_INSTRUCTION procedure 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

