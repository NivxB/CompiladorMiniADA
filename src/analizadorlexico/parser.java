
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 21 20:03:47 CST 2016
//----------------------------------------------------

package analizadorlexico;

import java_cup.runtime.*;
import analizadorlexico.AST.*;
import analizadorlexico.AST.Declaration.*;
import analizadorlexico.AST.Statement.*;
import analizadorlexico.AST.Primary.*;
import analizadorlexico.AST.Expression.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 21 20:03:47 CST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\013\000\002\002\004\000\002\020" +
    "\005\000\002\020\015\000\002\020\017\000\002\020\002" +
    "\000\002\035\005\000\002\035\002\000\002\034\005\000" +
    "\002\034\005\000\002\034\003\000\002\034\003\000\002" +
    "\021\006\000\002\021\006\000\002\021\007\000\002\022" +
    "\006\000\002\022\005\000\002\022\011\000\002\033\003" +
    "\000\002\033\002\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\006\000\002\004\004\000\002\004" +
    "\002\000\002\015\004\000\002\032\003\000\002\024\002" +
    "\000\002\025\005\000\002\025\003\000\002\026\005\000" +
    "\002\026\003\000\002\027\005\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\031\005\000\002\030\005\000\002\030\005\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\003\005\000\002\003" +
    "\004\000\002\003\003\000\002\016\005\000\002\016\003" +
    "\000\002\017\003\000\002\017\002\000\002\005\011\000" +
    "\002\006\007\000\002\006\004\000\002\006\002\000\002" +
    "\007\010\000\002\012\007\000\002\012\002\000\002\010" +
    "\010\000\002\011\011\000\002\013\006\000\002\013\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\004\004\004\001\002\000\004\047\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\005\010\001\002\000\012\004\013\006\ufffc\035" +
    "\014\047\012\001\002\000\004\014\264\001\002\000\006" +
    "\030\263\033\216\001\002\000\004\047\251\001\002\000" +
    "\004\047\204\001\002\000\004\006\016\001\002\000\026" +
    "\003\033\007\uffe5\010\036\016\027\022\023\026\020\040" +
    "\035\042\034\047\031\050\024\001\002\000\004\014\202" +
    "\001\002\000\016\012\057\047\054\050\024\051\051\057" +
    "\046\060\044\001\002\000\004\014\173\001\002\000\034" +
    "\003\033\007\uffe5\010\036\016\027\017\uffe5\020\uffe5\022" +
    "\023\026\020\032\uffe5\040\035\042\034\047\031\050\024" +
    "\001\002\000\006\003\033\047\163\001\002\000\004\012" +
    "\160\001\002\000\004\014\156\001\002\000\004\014\155" +
    "\001\002\000\016\012\057\047\054\050\024\051\051\057" +
    "\046\060\044\001\002\000\004\014\135\001\002\000\006" +
    "\012\077\027\133\001\002\000\004\007\130\001\002\000" +
    "\022\012\057\014\uffca\046\uffca\047\054\050\024\051\051" +
    "\057\046\060\044\001\002\000\014\047\105\050\024\051" +
    "\104\057\102\060\100\001\002\000\016\012\057\047\054" +
    "\050\024\051\051\057\046\060\044\001\002\000\004\014" +
    "\042\001\002\000\004\014\040\001\002\000\034\003\033" +
    "\007\uffe5\010\036\016\027\017\uffe5\020\uffe5\022\023\026" +
    "\020\032\uffe5\040\035\042\034\047\031\050\024\001\002" +
    "\000\012\007\uffea\017\uffea\020\uffea\032\uffea\001\002\000" +
    "\034\003\033\007\uffe5\010\036\016\027\017\uffe5\020\uffe5" +
    "\022\023\026\020\032\uffe5\040\035\042\034\047\031\050" +
    "\024\001\002\000\012\007\uffec\017\uffec\020\uffec\032\uffec" +
    "\001\002\000\050\003\uffdc\007\uffdc\010\uffdc\013\uffdc\014" +
    "\uffdc\016\uffdc\021\uffdc\022\uffdc\025\uffdc\026\uffdc\040\uffdc" +
    "\042\uffdc\046\uffdc\047\uffdc\050\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\001\002\000\050\003\uffde\007\uffde\010\uffde" +
    "\013\uffde\014\uffde\016\uffde\021\uffde\022\uffde\025\uffde\026" +
    "\uffde\040\uffde\042\uffde\046\uffde\047\uffde\050\uffde\052\uffde" +
    "\053\uffde\054\uffde\055\uffde\001\002\000\044\003\uffd6\007" +
    "\uffd6\010\uffd6\013\uffd6\014\uffd6\016\uffd6\021\uffd6\022\uffd6" +
    "\025\uffd6\026\uffd6\040\uffd6\042\uffd6\046\uffd6\047\uffd6\050" +
    "\uffd6\054\uffd6\055\uffd6\001\002\000\050\003\uffda\007\uffda" +
    "\010\uffda\013\uffda\014\uffda\016\uffda\021\uffda\022\uffda\025" +
    "\uffda\026\uffda\040\uffda\042\uffda\046\uffda\047\uffda\050\uffda" +
    "\052\uffda\053\uffda\054\uffda\055\uffda\001\002\000\046\003" +
    "\uffd7\007\uffd7\010\uffd7\013\uffd7\014\uffd7\016\uffd7\021\uffd7" +
    "\022\uffd7\025\uffd7\026\uffd7\040\uffd7\042\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\052\070\054\uffd7\055\uffd7\001\002\000\044" +
    "\003\uffd5\007\uffd5\010\uffd5\013\uffd5\014\uffd5\016\uffd5\021" +
    "\uffd5\022\uffd5\025\uffd5\026\uffd5\040\uffd5\042\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\054\uffd5\055\uffd5\001\002\000\044\003" +
    "\uffd8\007\uffd8\010\uffd8\013\uffd8\014\uffd8\016\uffd8\021\uffd8" +
    "\022\uffd8\025\uffd8\026\uffd8\040\uffd8\042\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\054\uffd8\055\uffd8\001\002\000\010\014\113" +
    "\054\064\055\063\001\002\000\052\003\uffdb\007\uffdb\010" +
    "\uffdb\012\077\013\uffdb\014\uffdb\016\uffdb\021\uffdb\022\uffdb" +
    "\025\uffdb\026\uffdb\040\uffdb\042\uffdb\046\uffdb\047\uffdb\050" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\001\002\000\044" +
    "\003\uffd9\007\uffd9\010\uffd9\013\uffd9\014\uffd9\016\uffd9\021" +
    "\uffd9\022\uffd9\025\uffd9\026\uffd9\040\uffd9\042\uffd9\046\uffd9" +
    "\047\uffd9\050\uffd9\054\uffd9\055\uffd9\001\002\000\050\003" +
    "\uffe0\007\uffe0\010\uffe0\013\uffe0\014\uffe0\016\uffe0\021\uffe0" +
    "\022\uffe0\025\uffe0\026\uffe0\040\uffe0\042\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\052\uffe0\053\074\054\uffe0\055\uffe0\001\002" +
    "\000\016\012\057\047\054\050\024\051\051\057\046\060" +
    "\044\001\002\000\012\013\071\052\070\054\uffd7\055\uffd7" +
    "\001\002\000\010\013\067\054\uffd8\055\uffd8\001\002\000" +
    "\006\054\064\055\063\001\002\000\016\012\057\047\054" +
    "\050\024\051\051\057\046\060\044\001\002\000\016\012" +
    "\057\047\054\050\024\051\051\057\046\060\044\001\002" +
    "\000\044\003\uffd4\007\uffd4\010\uffd4\013\uffd4\014\uffd4\016" +
    "\uffd4\021\uffd4\022\uffd4\025\uffd4\026\uffd4\040\uffd4\042\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\054\uffd4\055\uffd4\001\002\000" +
    "\044\003\uffd3\007\uffd3\010\uffd3\013\uffd3\014\uffd3\016\uffd3" +
    "\021\uffd3\022\uffd3\025\uffd3\026\uffd3\040\uffd3\042\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\054\064\055\uffd3\001\002\000\044" +
    "\003\uffd2\007\uffd2\010\uffd2\013\uffd2\014\uffd2\016\uffd2\021" +
    "\uffd2\022\uffd2\025\uffd2\026\uffd2\040\uffd2\042\uffd2\046\uffd2" +
    "\047\uffd2\050\uffd2\054\uffd2\055\uffd2\001\002\000\012\012" +
    "\072\047\054\050\024\060\044\001\002\000\050\003\uffdd" +
    "\007\uffdd\010\uffdd\013\uffdd\014\uffdd\016\uffdd\021\uffdd\022" +
    "\uffdd\025\uffdd\026\uffdd\040\uffdd\042\uffdd\046\uffdd\047\uffdd" +
    "\050\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\001\002\000" +
    "\012\012\072\047\054\050\024\060\044\001\002\000\050" +
    "\003\uffe1\007\uffe1\010\uffe1\013\uffe1\014\uffe1\016\uffe1\021" +
    "\uffe1\022\uffe1\025\uffe1\026\uffe1\040\uffe1\042\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\052\uffe1\053\074\054\uffe1\055\uffe1\001" +
    "\002\000\012\012\072\047\054\050\024\060\044\001\002" +
    "\000\050\003\uffdf\007\uffdf\010\uffdf\013\uffdf\014\uffdf\016" +
    "\uffdf\021\uffdf\022\uffdf\025\uffdf\026\uffdf\040\uffdf\042\uffdf" +
    "\046\uffdf\047\uffdf\050\uffdf\052\uffdf\053\uffdf\054\uffdf\055" +
    "\uffdf\001\002\000\006\013\071\052\070\001\002\000\016" +
    "\013\uffc6\047\105\050\024\051\104\057\102\060\100\001" +
    "\002\000\012\005\uffd0\013\uffd0\033\uffd0\043\uffd0\001\002" +
    "\000\006\013\uffc8\033\111\001\002\000\012\005\uffd1\013" +
    "\uffd1\033\uffd1\043\uffd1\001\002\000\012\005\uffcd\013\uffcd" +
    "\033\uffcd\043\uffcd\001\002\000\012\005\uffcf\013\uffcf\033" +
    "\uffcf\043\uffcf\001\002\000\014\005\uffce\012\077\013\uffce" +
    "\033\uffce\043\uffce\001\002\000\004\013\uffc7\001\002\000" +
    "\004\013\110\001\002\000\056\003\uffbc\005\uffbc\007\uffbc" +
    "\010\uffbc\013\uffbc\014\uffbc\016\uffbc\021\uffbc\022\uffbc\025" +
    "\uffbc\026\uffbc\033\uffbc\040\uffbc\042\uffbc\043\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\001" +
    "\002\000\014\047\105\050\024\051\104\057\102\060\100" +
    "\001\002\000\004\013\uffc9\001\002\000\034\003\033\007" +
    "\uffe5\010\036\016\027\017\uffe5\020\uffe5\022\023\026\020" +
    "\032\uffe5\040\035\042\034\047\031\050\024\001\002\000" +
    "\012\007\uffe7\017\uffe7\020\uffe7\032\uffe7\001\002\000\004" +
    "\005\116\001\002\000\006\007\uffbf\032\120\001\002\000" +
    "\004\007\125\001\002\000\014\047\105\050\024\051\104" +
    "\057\102\060\100\001\002\000\004\043\122\001\002\000" +
    "\030\003\033\007\uffe5\010\036\016\027\022\023\026\020" +
    "\032\uffe5\040\035\042\034\047\031\050\024\001\002\000" +
    "\006\007\uffbf\032\120\001\002\000\004\007\uffc0\001\002" +
    "\000\004\042\126\001\002\000\004\014\uffc1\001\002\000" +
    "\012\014\uffcb\046\uffcb\054\064\055\063\001\002\000\004" +
    "\047\131\001\002\000\004\014\132\001\002\000\004\002" +
    "\001\001\002\000\016\012\057\047\054\050\024\051\051" +
    "\057\046\060\044\001\002\000\012\014\uffcc\046\uffcc\054" +
    "\064\055\063\001\002\000\034\003\033\007\uffe5\010\036" +
    "\016\027\017\uffe5\020\uffe5\022\023\026\020\032\uffe5\040" +
    "\035\042\034\047\031\050\024\001\002\000\012\007\uffe8" +
    "\017\uffe8\020\uffe8\032\uffe8\001\002\000\004\021\141\001" +
    "\002\000\012\021\uffe3\025\uffe3\054\064\055\063\001\002" +
    "\000\032\003\033\007\uffe5\010\036\016\027\017\uffe5\020" +
    "\uffe5\022\023\026\020\040\035\042\034\047\031\050\024" +
    "\001\002\000\010\007\uffc2\017\144\020\143\001\002\000" +
    "\016\012\057\047\054\050\024\051\051\057\046\060\044" +
    "\001\002\000\026\003\033\007\uffe5\010\036\016\027\022" +
    "\023\026\020\040\035\042\034\047\031\050\024\001\002" +
    "\000\004\007\146\001\002\000\004\016\147\001\002\000" +
    "\004\014\uffc5\001\002\000\004\007\uffc3\001\002\000\004" +
    "\021\152\001\002\000\032\003\033\007\uffe5\010\036\016" +
    "\027\017\uffe5\020\uffe5\022\023\026\020\040\035\042\034" +
    "\047\031\050\024\001\002\000\010\007\uffc2\017\144\020" +
    "\143\001\002\000\004\007\uffc4\001\002\000\034\003\uffe4" +
    "\007\uffe4\010\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4\026" +
    "\uffe4\032\uffe4\040\uffe4\042\uffe4\047\uffe4\050\uffe4\001\002" +
    "\000\034\003\033\007\uffe5\010\036\016\027\017\uffe5\020" +
    "\uffe5\022\023\026\020\032\uffe5\040\035\042\034\047\031" +
    "\050\024\001\002\000\012\007\uffe9\017\uffe9\020\uffe9\032" +
    "\uffe9\001\002\000\016\013\uffc6\047\105\050\024\051\104" +
    "\057\102\060\100\001\002\000\004\013\162\001\002\000" +
    "\056\003\uffbb\005\uffbb\007\uffbb\010\uffbb\013\uffbb\014\uffbb" +
    "\016\uffbb\021\uffbb\022\uffbb\025\uffbb\026\uffbb\033\uffbb\040" +
    "\uffbb\042\uffbb\043\uffbb\046\uffbb\047\uffbb\050\uffbb\052\uffbb" +
    "\053\uffbb\054\uffbb\055\uffbb\001\002\000\004\027\133\001" +
    "\002\000\004\046\165\001\002\000\016\012\057\047\054" +
    "\050\024\051\051\057\046\060\044\001\002\000\032\003" +
    "\033\007\uffe5\010\036\016\027\022\023\026\020\040\035" +
    "\042\034\047\031\050\024\054\064\055\063\001\002\000" +
    "\004\007\170\001\002\000\004\022\171\001\002\000\004" +
    "\014\uffbd\001\002\000\012\007\uffe6\017\uffe6\020\uffe6\032" +
    "\uffe6\001\002\000\034\003\033\007\uffe5\010\036\016\027" +
    "\017\uffe5\020\uffe5\022\023\026\020\032\uffe5\040\035\042" +
    "\034\047\031\050\024\001\002\000\012\007\uffed\017\uffed" +
    "\020\uffed\032\uffed\001\002\000\004\025\176\001\002\000" +
    "\026\003\033\007\uffe5\010\036\016\027\022\023\026\020" +
    "\040\035\042\034\047\031\050\024\001\002\000\004\007" +
    "\200\001\002\000\004\025\201\001\002\000\004\014\uffbe" +
    "\001\002\000\034\003\033\007\uffe5\010\036\016\027\017" +
    "\uffe5\020\uffe5\022\023\026\020\032\uffe5\040\035\042\034" +
    "\047\031\050\024\001\002\000\012\007\uffeb\017\uffeb\020" +
    "\uffeb\032\uffeb\001\002\000\006\012\206\040\ufffa\001\002" +
    "\000\004\040\237\001\002\000\004\047\210\001\002\000" +
    "\006\013\ufff7\014\235\001\002\000\006\030\217\033\216" +
    "\001\002\000\006\013\ufff6\014\214\001\002\000\004\013" +
    "\213\001\002\000\006\005\ufffb\040\ufffb\001\002\000\004" +
    "\047\210\001\002\000\004\013\ufff8\001\002\000\004\047" +
    "\012\001\002\000\012\023\221\024\220\034\222\056\uffee" +
    "\001\002\000\004\056\233\001\002\000\006\024\230\056" +
    "\231\001\002\000\004\056\uffef\001\002\000\004\056\224" +
    "\001\002\000\010\013\ufff2\014\ufff2\027\225\001\002\000" +
    "\016\012\057\047\054\050\024\051\051\057\046\060\044" +
    "\001\002\000\010\014\227\054\064\055\063\001\002\000" +
    "\006\013\ufff0\014\ufff0\001\002\000\004\056\232\001\002" +
    "\000\006\013\ufff5\014\ufff5\001\002\000\006\013\ufff3\014" +
    "\ufff3\001\002\000\006\013\ufff4\014\ufff4\001\002\000\006" +
    "\013\ufff1\014\ufff1\001\002\000\004\047\210\001\002\000" +
    "\004\013\ufff9\001\002\000\004\056\240\001\002\000\004" +
    "\005\241\001\002\000\012\004\013\006\ufffc\035\014\047" +
    "\012\001\002\000\004\006\243\001\002\000\026\003\033" +
    "\007\uffe5\010\036\016\027\022\023\026\020\040\035\042" +
    "\034\047\031\050\024\001\002\000\004\007\245\001\002" +
    "\000\004\047\246\001\002\000\004\014\247\001\002\000" +
    "\012\004\013\006\ufffc\035\014\047\012\001\002\000\004" +
    "\006\ufffd\001\002\000\006\005\ufffa\012\206\001\002\000" +
    "\004\005\253\001\002\000\012\004\013\006\ufffc\035\014" +
    "\047\012\001\002\000\004\006\255\001\002\000\026\003" +
    "\033\007\uffe5\010\036\016\027\022\023\026\020\040\035" +
    "\042\034\047\031\050\024\001\002\000\004\007\257\001" +
    "\002\000\004\047\260\001\002\000\004\014\261\001\002" +
    "\000\012\004\013\006\ufffc\035\014\047\012\001\002\000" +
    "\004\006\ufffe\001\002\000\006\034\222\056\uffee\001\002" +
    "\000\012\004\013\006\ufffc\035\014\047\012\001\002\000" +
    "\004\006\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\014\022\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\020\004\031\005\016\007\036\010\024\011" +
    "\027\013\025\015\021\001\001\000\002\001\001\000\022" +
    "\013\046\023\137\025\047\026\055\027\044\030\051\031" +
    "\054\032\174\001\001\000\002\001\001\000\022\003\020" +
    "\004\171\005\016\007\036\010\024\011\027\013\025\015" +
    "\021\001\001\000\004\003\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\013\046\023" +
    "\137\025\047\026\055\027\044\030\051\031\054\032\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\013\046\023\126\025\047\026\055\027\044" +
    "\030\051\031\054\001\001\000\006\013\102\014\114\001" +
    "\001\000\020\013\046\023\052\025\047\026\055\027\044" +
    "\030\051\031\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\020\004\040\005\016\007\036\010\024" +
    "\011\027\013\025\015\021\001\001\000\002\001\001\000" +
    "\022\003\020\004\042\005\016\007\036\010\024\011\027" +
    "\013\025\015\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\013\046\023\061\025\057\026\055\027" +
    "\044\030\060\031\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\013\046\023\065\025" +
    "\047\026\055\027\044\030\051\031\054\001\001\000\020" +
    "\013\046\023\064\025\047\026\055\027\044\030\051\031" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\046\026\072\027\044\001\001\000" +
    "\002\001\001\000\012\013\046\025\075\026\055\027\044" +
    "\001\001\000\002\001\001\000\006\013\046\027\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\102" +
    "\014\100\016\105\017\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\102\014\100\016\111" +
    "\001\001\000\002\001\001\000\022\003\020\004\113\005" +
    "\016\007\036\010\024\011\027\013\025\015\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\116\001" +
    "\001\000\002\001\001\000\006\013\102\014\120\001\001" +
    "\000\002\001\001\000\022\003\020\004\122\005\016\007" +
    "\036\010\024\011\027\013\025\015\021\001\001\000\004" +
    "\012\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\013\046\023\133\025" +
    "\047\026\055\027\044\030\051\031\054\001\001\000\002" +
    "\001\001\000\022\003\020\004\135\005\016\007\036\010" +
    "\024\011\027\013\025\015\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\020\004" +
    "\141\005\016\007\036\010\024\011\027\013\025\015\021" +
    "\001\001\000\004\006\144\001\001\000\022\013\046\023" +
    "\137\025\047\026\055\027\044\030\051\031\054\032\150" +
    "\001\001\000\022\003\020\004\147\005\016\007\036\010" +
    "\024\011\027\013\025\015\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\020\004\152\005\016\007\036" +
    "\010\024\011\027\013\025\015\021\001\001\000\004\006" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\020\004\156\005\016\007\036\010\024\011\027\013" +
    "\025\015\021\001\001\000\002\001\001\000\012\013\102" +
    "\014\100\016\105\017\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\046\023\165\025\047\026\055\027\044\030\051\031" +
    "\054\001\001\000\022\003\020\004\166\005\016\007\036" +
    "\010\024\011\027\013\025\015\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\020\004\173\005\016\007\036\010\024\011" +
    "\027\013\025\015\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\020\004\176\005\016\007\036\010" +
    "\024\011\027\013\025\015\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\020\004" +
    "\202\005\016\007\036\010\024\011\027\013\025\015\021" +
    "\001\001\000\002\001\001\000\004\035\204\001\001\000" +
    "\002\001\001\000\010\021\210\022\206\034\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\210\022\206" +
    "\034\214\001\001\000\002\001\001\000\004\022\233\001" +
    "\001\000\004\033\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\013\046\023\225\025\047\026\055\027\044" +
    "\030\051\031\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\210\022" +
    "\206\034\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\241\022\010\001\001\000" +
    "\002\001\001\000\022\003\020\004\243\005\016\007\036" +
    "\010\024\011\027\013\025\015\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\247" +
    "\022\010\001\001\000\002\001\001\000\004\035\251\001" +
    "\001\000\002\001\001\000\006\020\253\022\010\001\001" +
    "\000\002\001\001\000\022\003\020\004\255\005\016\007" +
    "\036\010\024\011\027\013\025\015\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\261\022\010\001\001\000\002\001\001\000\004\033\222" +
    "\001\001\000\006\020\264\022\010\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public InitProcedure FINALOBJECT;

    public void syntax_error(Symbol cur_token){
        System.out.print("Syntax Error:");
        System.out.print(" line:" + cur_token.left);
        System.out.print(" column:" + cur_token.right);
        System.out.println();
    }

    public void expected_token(String token){
      System.out.print("Expected Token " + token);
      System.out.println();
    };


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // function_call ::= PUT OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS 
            {
              Primary RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListPrimary p = (ListPrimary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionCall(id,p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // function_call ::= ID OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS 
            {
              Primary RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListPrimary p = (ListPrimary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionCall(id,p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // for ::= FOR asignation TO expression statement END FOR 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ForStatement(a,s,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // while ::= WHILE condition LOOP statement END LOOP 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WhileStatement(c,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // case_a ::= 
            {
              CaseBody RESULT =null;
		RESULT = new CaseBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_a",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // case_a ::= WHEN primary CASEASIG statement case_a 
            {
              CaseBody RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Primary p = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseBody cb = (CaseBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CaseBody(p,s,cb); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_a",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // case ::= CASE primary IS case_a END CASE 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Primary p = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CaseBody cb = (CaseBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CaseStatement(p,cb); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_a ::= 
            {
              Statement RESULT =null;
		 RESULT = new IfStatement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_a ::= ELSE statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStatement(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if_a ::= ELSEIF condition THEN statement if_a 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement ef = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStatement(c,s,ef); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // if ::= IF condition THEN statement if_a END IF 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement ef = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IfStatement(c,s,ef); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parameters ::= 
            {
              ListPrimary RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parameters ::= list_primary 
            {
              ListPrimary RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListPrimary lp = (ListPrimary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // list_primary ::= primary 
            {
              ListPrimary RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Primary p = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListPrimary(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_primary",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // list_primary ::= primary COMMA list_primary 
            {
              ListPrimary RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Primary p = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListPrimary lp = (ListPrimary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListPrimary(p,lp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_primary",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asignation ::= error 
            {
              Statement RESULT =null;
		 parser.expected_token(":="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // asignation ::= error expression 
            {
              Statement RESULT =null;
		 parser.expected_token(":="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignation ::= ID ASIGNATION expression 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignationStatement(id,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // primary ::= function_call 
            {
              Primary RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Primary fc = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // primary ::= ID 
            {
              Primary RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // primary ::= LITERAL_STRING 
            {
              Primary RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LiteralString(S);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // primary ::= LITERAL_INT 
            {
              Primary RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LiteralInt(Integer.parseInt(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // primary ::= LITERAL_BOOLEAN 
            {
              Primary RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LiteralBoolean(Boolean.parseBoolean(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condition_expression ::= OPEN_PARENTHESIS condition_expression CLOSE_PARENTHESIS 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condition_expression ::= expression CONDITION_ELEMENT expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConditionExpression(e,e1,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relation_expression ::= expression RELATION_OPERATOR expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelationExpression(e,e1,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= LITERAL_STRING 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimaryExpression(new LiteralString(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= LITERAL_BOOLEAN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimaryExpression(new LiteralBoolean(Boolean.parseBoolean(e))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= mathematical_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= condition_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= relation_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parenthesis_operation ::= function_call 
            {
              Expression RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Primary fc = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new PrimaryExpression(fc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parenthesis_operation ::= ID 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimaryExpression(new ID(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parenthesis_operation ::= LITERAL_INT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimaryExpression(new LiteralInt(Integer.parseInt(i))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parenthesis_operation ::= OPEN_PARENTHESIS mathematical_expression CLOSE_PARENTHESIS 
            {
              Expression RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = me; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mult_operation ::= parenthesis_operation 
            {
              Expression RESULT =null;
		int poleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int poright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression po = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = po; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_operation",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mult_operation ::= mult_operation MULT_OPERATOR parenthesis_operation 
            {
              Expression RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression mo = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mult = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int poright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression po = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultExpression(mo,po,mult); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_operation",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // mathematical_expression ::= mult_operation 
            {
              Expression RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression mo = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = mo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathematical_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // mathematical_expression ::= mathematical_expression SUM_OPERATOR mult_operation 
            {
              Expression RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int soleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int soright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String so = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int me2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int me2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression me2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AddExpression(me,me2,so); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathematical_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // simple_expression ::= 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condition ::= expression 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Condition(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_call_statement ::= function_call END_INSTRUCTION 
            {
              Primary RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Primary fc = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = fc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= 
            {
              Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= function_call_statement statement 
            {
              Statement RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Primary fs = (Primary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionCallStatement(fs,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= RETURN expression END_INSTRUCTION statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReturnStatement(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= for END_INSTRUCTION statement 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement f = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForStatement(f,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= while END_INSTRUCTION statement 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement w = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileStatement(w,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= case END_INSTRUCTION statement 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CaseStatement(c,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= if END_INSTRUCTION statement 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStatement(i,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= NEW_LINE END_INSTRUCTION statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NewLineStatement(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= asignation END_INSTRUCTION statement 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AsignationStatement(a,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constant ::= 
            {
              Boolean RESULT =null;
		RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constant ::= CONSTANT 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // simple_declaration ::= ID DECLARATION constant TYPE ASIGNATION expression END_INSTRUCTION 
            {
              Declaration RESULT =null;
		 /* LATER */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simple_declaration ::= ID COMMA simple_declaration 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration sd = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleDeclaration(i,sd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // simple_declaration ::= ID DECLARATION constant TYPE 
            {
              Declaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleDeclaration(id,t,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // in_out_declaration ::= ID DECLARATION IN OUT TYPE 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InOutDeclaration(i,t,"IN OUT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // in_out_declaration ::= ID DECLARATION OUT TYPE 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InOutDeclaration(i,t,"OUT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // in_out_declaration ::= ID DECLARATION IN TYPE 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InOutDeclaration(i,t,"IN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_declaration_parameters ::= in_out_declaration 
            {
              ListDeclarationParameter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ListDeclarationParameter(d,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list_declaration_parameters ::= simple_declaration 
            {
              ListDeclarationParameter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ListDeclarationParameter(d,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list_declaration_parameters ::= in_out_declaration END_INSTRUCTION list_declaration_parameters 
            {
              ListDeclarationParameter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListDeclarationParameter lp = (ListDeclarationParameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ListDeclarationParameter(d,lp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // list_declaration_parameters ::= simple_declaration END_INSTRUCTION list_declaration_parameters 
            {
              ListDeclarationParameter RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListDeclarationParameter lp = (ListDeclarationParameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ListDeclarationParameter(d,lp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // input_parameters ::= 
            {
              ListDeclarationParameter RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_parameters",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // input_parameters ::= OPEN_PARENTHESIS list_declaration_parameters CLOSE_PARENTHESIS 
            {
              ListDeclarationParameter RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListDeclarationParameter lp = (ListDeclarationParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = lp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_parameters",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= 
            {
              Declaration RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= FUNCTION ID input_parameters RETURN TYPE IS declaration BEGIN statement END ID END_INSTRUCTION declaration 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int ipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ListDeclarationParameter ip = (ListDeclarationParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d2 = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionDeclaration(i,ip,d,s,t,d2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration ::= PROCEDURE ID input_parameters IS declaration BEGIN statement END ID END_INSTRUCTION declaration 
            {
              Declaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ListDeclarationParameter ip = (ListDeclarationParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d2 = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProcedureDeclaration(i,ip,d,s,d2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration ::= simple_declaration END_INSTRUCTION declaration 
            {
              Declaration RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declaration s = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleDeclaration(s,d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= procedure EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InitProcedure start_val = (InitProcedure)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // procedure ::= PROCEDURE ID IS declaration BEGIN statement END ID END_INSTRUCTION 
            {
              InitProcedure RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new InitProcedure(d,s);
                  parser.FINALOBJECT = RESULT;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

