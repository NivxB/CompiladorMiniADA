
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 18 14:28:06 CDT 2016
//----------------------------------------------------

package analizadorlexico;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 18 14:28:06 CDT 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\014\000\002\002\004\000\002\002" +
    "\002\000\002\010\005\000\002\010\010\000\002\010\012" +
    "\000\002\010\002\000\002\027\005\000\002\027\002\000" +
    "\002\017\004\000\002\017\004\000\002\017\003\000\002" +
    "\017\003\000\002\020\006\000\002\020\006\000\002\020" +
    "\007\000\002\030\006\000\002\030\005\000\002\030\011" +
    "\000\002\031\010\000\002\031\002\000\002\012\003\000" +
    "\002\012\002\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\006\000\002\004\005\000\002\004\002" +
    "\000\002\032\003\000\002\011\002\000\002\014\005\000" +
    "\002\014\003\000\002\015\005\000\002\015\003\000\002" +
    "\016\005\000\002\016\003\000\002\033\005\000\002\033" +
    "\005\000\002\033\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\003\005\000\002\003\003\000\002\006\005\000\002" +
    "\006\003\000\002\013\003\000\002\013\002\000\002\021" +
    "\011\000\002\022\007\000\002\022\004\000\002\022\002" +
    "\000\002\023\006\000\002\024\007\000\002\024\010\000" +
    "\002\024\004\000\002\025\010\000\002\026\011\000\002" +
    "\005\006\000\002\005\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\006\002\uffff\004\004\001\002\000\004\036" +
    "\007\001\002\000\004\002\006\001\002\000\004\002\000" +
    "\001\002\000\004\005\010\001\002\000\012\004\013\006" +
    "\ufffb\036\012\047\014\001\002\000\004\023\247\001\002" +
    "\000\006\040\246\043\206\001\002\000\004\036\241\001" +
    "\002\000\004\036\175\001\002\000\004\006\016\001\002" +
    "\000\026\003\032\007\uffe2\010\023\011\035\025\026\031" +
    "\022\035\020\036\030\052\034\054\033\001\002\000\004" +
    "\023\173\001\002\000\016\010\023\013\054\021\046\022" +
    "\043\036\052\044\050\001\002\000\004\023\164\001\002" +
    "\000\006\003\032\036\155\001\002\000\004\013\152\001" +
    "\002\000\004\023\150\001\002\000\004\023\146\001\002" +
    "\000\016\010\023\013\054\021\046\022\043\036\052\044" +
    "\050\001\002\000\004\023\127\001\002\000\006\013\072" +
    "\037\125\001\002\000\004\007\121\001\002\000\006\023" +
    "\uffd0\060\uffd0\001\002\000\016\010\023\013\054\021\046" +
    "\022\043\036\052\044\050\001\002\000\016\010\023\013" +
    "\054\021\046\022\043\036\052\044\050\001\002\000\004" +
    "\023\041\001\002\000\004\023\037\001\002\000\034\003" +
    "\032\007\uffe2\010\023\011\035\025\026\026\uffe2\027\uffe2" +
    "\031\022\035\020\036\030\042\uffe2\052\034\054\033\001" +
    "\002\000\012\007\uffe7\026\uffe7\027\uffe7\042\uffe7\001\002" +
    "\000\034\003\032\007\uffe2\010\023\011\035\025\026\026" +
    "\uffe2\027\uffe2\031\022\035\020\036\030\042\uffe2\052\034" +
    "\054\033\001\002\000\012\007\uffe9\026\uffe9\027\uffe9\042" +
    "\uffe9\001\002\000\056\003\uffd5\005\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\023\uffd5\025" +
    "\uffd5\030\uffd5\031\uffd5\034\uffd5\035\uffd5\036\uffd5\043\uffd5" +
    "\045\uffd5\052\uffd5\054\uffd5\055\uffd5\060\uffd5\001\002\000" +
    "\052\003\uffdc\005\uffdc\007\uffdc\010\uffdc\011\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\023\uffdc\025\uffdc\030\uffdc\031" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\045\uffdc\052\uffdc\054\uffdc" +
    "\060\uffdc\001\002\000\052\003\uffda\005\uffda\007\uffda\010" +
    "\uffda\011\uffda\014\uffda\015\uffda\016\uffda\017\uffda\023\uffda" +
    "\025\uffda\030\uffda\031\uffda\034\uffda\035\uffda\036\uffda\045" +
    "\uffda\052\uffda\054\uffda\060\uffda\001\002\000\056\003\uffd6" +
    "\005\uffd6\007\uffd6\010\uffd6\011\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\023\uffd6\025\uffd6\030\uffd6\031\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\043\uffd6\045\uffd6\052\uffd6\054\uffd6\055" +
    "\uffd6\060\uffd6\001\002\000\056\003\uffd2\005\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\023" +
    "\uffd2\025\uffd2\030\uffd2\031\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\043\uffd2\045\uffd2\052\uffd2\054\uffd2\055\uffd2\060\uffd2\001" +
    "\002\000\056\003\uffd4\005\uffd4\007\uffd4\010\uffd4\011\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\023\uffd4\025\uffd4\030" +
    "\uffd4\031\uffd4\034\uffd4\035\uffd4\036\uffd4\043\uffd4\045\uffd4" +
    "\052\uffd4\054\uffd4\055\uffd4\060\uffd4\001\002\000\046\003" +
    "\uffd7\005\uffd7\007\uffd7\010\uffd7\011\uffd7\015\061\017\uffd7" +
    "\023\uffd7\025\uffd7\030\uffd7\031\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\045\uffd7\052\uffd7\054\uffd7\060\uffd7\001\002\000\060" +
    "\003\uffd3\005\uffd3\007\uffd3\010\uffd3\011\uffd3\013\072\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\023\uffd3\025\uffd3\030\uffd3" +
    "\031\uffd3\034\uffd3\035\uffd3\036\uffd3\043\uffd3\045\uffd3\052" +
    "\uffd3\054\uffd3\055\uffd3\060\uffd3\001\002\000\010\017\065" +
    "\023\066\045\064\001\002\000\016\010\023\013\054\021" +
    "\046\022\043\036\052\044\050\001\002\000\052\003\uffde" +
    "\005\uffde\007\uffde\010\uffde\011\uffde\014\uffde\015\uffde\016" +
    "\056\017\uffde\023\uffde\025\uffde\030\uffde\031\uffde\034\uffde" +
    "\035\uffde\036\uffde\045\uffde\052\uffde\054\uffde\060\uffde\001" +
    "\002\000\016\010\023\013\054\021\046\022\043\036\052" +
    "\044\050\001\002\000\052\003\uffdd\005\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\023\uffdd" +
    "\025\uffdd\030\uffdd\031\uffdd\034\uffdd\035\uffdd\036\uffdd\045" +
    "\uffdd\052\uffdd\054\uffdd\060\uffdd\001\002\000\006\014\062" +
    "\015\061\001\002\000\016\010\023\013\054\021\046\022" +
    "\043\036\052\044\050\001\002\000\052\003\uffdb\005\uffdb" +
    "\007\uffdb\010\uffdb\011\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\023\uffdb\025\uffdb\030\uffdb\031\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\045\uffdb\052\uffdb\054\uffdb\060\uffdb\001\002\000" +
    "\052\003\uffdf\005\uffdf\007\uffdf\010\uffdf\011\uffdf\014\uffdf" +
    "\015\uffdf\016\056\017\uffdf\023\uffdf\025\uffdf\030\uffdf\031" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\045\uffdf\052\uffdf\054\uffdf" +
    "\060\uffdf\001\002\000\016\010\023\013\054\021\046\022" +
    "\043\036\052\044\050\001\002\000\016\010\023\013\054" +
    "\021\046\022\043\036\052\044\050\001\002\000\034\003" +
    "\032\007\uffe2\010\023\011\035\025\026\026\uffe2\027\uffe2" +
    "\031\022\035\020\036\030\042\uffe2\052\034\054\033\001" +
    "\002\000\012\007\uffe4\026\uffe4\027\uffe4\042\uffe4\001\002" +
    "\000\044\003\uffd8\005\uffd8\007\uffd8\010\uffd8\011\uffd8\017" +
    "\uffd8\023\uffd8\025\uffd8\030\uffd8\031\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\045\uffd8\052\uffd8\054\uffd8\060\uffd8\001\002\000" +
    "\044\003\uffd9\005\uffd9\007\uffd9\010\uffd9\011\uffd9\017\065" +
    "\023\uffd9\025\uffd9\030\uffd9\031\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\045\uffd9\052\uffd9\054\uffd9\060\uffd9\001\002\000\016" +
    "\010\023\014\uffcc\021\046\022\043\036\052\044\050\001" +
    "\002\000\006\014\uffce\043\077\001\002\000\004\014\uffcd" +
    "\001\002\000\004\014\076\001\002\000\056\003\uffc1\005" +
    "\uffc1\007\uffc1\010\uffc1\011\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\023\uffc1\025\uffc1\030\uffc1\031\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\043\uffc1\045\uffc1\052\uffc1\054\uffc1\055\uffc1" +
    "\060\uffc1\001\002\000\014\010\023\021\046\022\043\036" +
    "\052\044\050\001\002\000\004\014\uffcf\001\002\000\004" +
    "\005\103\001\002\000\014\005\uffe1\017\065\030\uffe1\034" +
    "\uffe1\045\064\001\002\000\006\007\106\042\105\001\002" +
    "\000\004\023\uffc7\001\002\000\016\010\023\021\046\022" +
    "\043\036\052\044\050\057\110\001\002\000\004\054\107" +
    "\001\002\000\004\023\uffc4\001\002\000\004\055\115\001" +
    "\002\000\004\055\112\001\002\000\030\003\032\007\uffe2" +
    "\010\023\011\035\025\026\031\022\035\020\036\030\042" +
    "\uffe2\052\034\054\033\001\002\000\006\007\106\042\105" +
    "\001\002\000\004\023\uffc6\001\002\000\026\003\032\007" +
    "\uffe2\010\023\011\035\025\026\031\022\035\020\036\030" +
    "\052\034\054\033\001\002\000\004\007\117\001\002\000" +
    "\004\054\120\001\002\000\004\023\uffc5\001\002\000\004" +
    "\036\122\001\002\000\004\023\123\001\002\000\006\002" +
    "\uffff\004\004\001\002\000\004\002\001\001\002\000\016" +
    "\010\023\013\054\021\046\022\043\036\052\044\050\001" +
    "\002\000\012\017\065\023\uffd1\045\064\060\uffd1\001\002" +
    "\000\034\003\032\007\uffe2\010\023\011\035\025\026\026" +
    "\uffe2\027\uffe2\031\022\035\020\036\030\042\uffe2\052\034" +
    "\054\033\001\002\000\012\007\uffe5\026\uffe5\027\uffe5\042" +
    "\uffe5\001\002\000\004\030\132\001\002\000\032\003\032" +
    "\007\uffe2\010\023\011\035\025\026\026\uffe2\027\uffe2\031" +
    "\022\035\020\036\030\052\034\054\033\001\002\000\010" +
    "\007\uffc8\026\135\027\134\001\002\000\016\010\023\013" +
    "\054\021\046\022\043\036\052\044\050\001\002\000\026" +
    "\003\032\007\uffe2\010\023\011\035\025\026\031\022\035" +
    "\020\036\030\052\034\054\033\001\002\000\004\007\137" +
    "\001\002\000\004\025\140\001\002\000\004\023\uffcb\001" +
    "\002\000\004\007\uffc9\001\002\000\004\030\143\001\002" +
    "\000\032\003\032\007\uffe2\010\023\011\035\025\026\026" +
    "\uffe2\027\uffe2\031\022\035\020\036\030\052\034\054\033" +
    "\001\002\000\010\007\uffc8\026\135\027\134\001\002\000" +
    "\004\007\uffca\001\002\000\034\003\032\007\uffe2\010\023" +
    "\011\035\025\026\026\uffe2\027\uffe2\031\022\035\020\036" +
    "\030\042\uffe2\052\034\054\033\001\002\000\012\007\uffe3" +
    "\026\uffe3\027\uffe3\042\uffe3\001\002\000\034\003\032\007" +
    "\uffe2\010\023\011\035\025\026\026\uffe2\027\uffe2\031\022" +
    "\035\020\036\030\042\uffe2\052\034\054\033\001\002\000" +
    "\012\007\uffe6\026\uffe6\027\uffe6\042\uffe6\001\002\000\016" +
    "\010\023\014\uffcc\021\046\022\043\036\052\044\050\001" +
    "\002\000\004\014\154\001\002\000\056\003\uffc0\005\uffc0" +
    "\007\uffc0\010\uffc0\011\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\023\uffc0\025\uffc0\030\uffc0\031\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\043\uffc0\045\uffc0\052\uffc0\054\uffc0\055\uffc0\060" +
    "\uffc0\001\002\000\004\037\125\001\002\000\004\060\157" +
    "\001\002\000\016\010\023\013\054\021\046\022\043\036" +
    "\052\044\050\001\002\000\032\003\032\007\uffe2\010\023" +
    "\011\035\017\065\025\026\031\022\035\020\036\030\045" +
    "\064\052\034\054\033\001\002\000\004\007\162\001\002" +
    "\000\004\031\163\001\002\000\004\023\uffc2\001\002\000" +
    "\034\003\032\007\uffe2\010\023\011\035\025\026\026\uffe2" +
    "\027\uffe2\031\022\035\020\036\030\042\uffe2\052\034\054" +
    "\033\001\002\000\012\007\uffea\026\uffea\027\uffea\042\uffea" +
    "\001\002\000\004\034\167\001\002\000\026\003\032\007" +
    "\uffe2\010\023\011\035\025\026\031\022\035\020\036\030" +
    "\052\034\054\033\001\002\000\004\007\171\001\002\000" +
    "\004\034\172\001\002\000\004\023\uffc3\001\002\000\034" +
    "\003\032\007\uffe2\010\023\011\035\025\026\026\uffe2\027" +
    "\uffe2\031\022\035\020\036\030\042\uffe2\052\034\054\033" +
    "\001\002\000\012\007\uffe8\026\uffe8\027\uffe8\042\uffe8\001" +
    "\002\000\006\013\177\052\ufff9\001\002\000\004\052\226" +
    "\001\002\000\004\036\201\001\002\000\006\014\ufff6\036" +
    "\201\001\002\000\006\040\207\043\206\001\002\000\006" +
    "\014\ufff5\036\201\001\002\000\004\014\204\001\002\000" +
    "\010\005\ufffa\023\ufffa\052\ufffa\001\002\000\004\014\ufff7" +
    "\001\002\000\004\036\012\001\002\000\012\020\uffeb\032" +
    "\211\033\210\046\212\001\002\000\004\020\223\001\002" +
    "\000\006\020\221\033\220\001\002\000\004\020\uffec\001" +
    "\002\000\004\020\214\001\002\000\012\014\ufff1\023\ufff1" +
    "\036\ufff1\037\215\001\002\000\016\010\023\013\054\021" +
    "\046\022\043\036\052\044\050\001\002\000\010\017\065" +
    "\023\217\045\064\001\002\000\010\014\uffef\023\uffef\036" +
    "\uffef\001\002\000\004\020\222\001\002\000\006\014\ufff4" +
    "\036\ufff4\001\002\000\006\014\ufff2\036\ufff2\001\002\000" +
    "\006\014\ufff3\036\ufff3\001\002\000\010\014\ufff0\023\ufff0" +
    "\036\ufff0\001\002\000\004\014\ufff8\001\002\000\004\020" +
    "\227\001\002\000\006\005\230\023\uffed\001\002\000\012" +
    "\004\013\006\ufffb\036\012\047\014\001\002\000\004\023" +
    "\232\001\002\000\012\004\013\006\ufffb\036\012\047\014" +
    "\001\002\000\004\006\ufffc\001\002\000\004\006\235\001" +
    "\002\000\026\003\032\007\uffe2\010\023\011\035\025\026" +
    "\031\022\035\020\036\030\052\034\054\033\001\002\000" +
    "\004\007\237\001\002\000\004\036\240\001\002\000\004" +
    "\023\uffee\001\002\000\010\005\ufff9\013\177\023\ufff9\001" +
    "\002\000\006\005\230\023\uffed\001\002\000\004\023\244" +
    "\001\002\000\012\004\013\006\ufffb\036\012\047\014\001" +
    "\002\000\004\006\ufffd\001\002\000\006\020\uffeb\046\212" +
    "\001\002\000\012\004\013\006\ufffb\036\012\047\014\001" +
    "\002\000\004\006\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\014\030\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\020\004\030\005\024\021\016\023\035\025" +
    "\023\026\026\001\001\000\002\001\001\000\020\005\046" +
    "\007\044\014\050\015\054\016\043\032\165\033\101\001" +
    "\001\000\002\001\001\000\004\003\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\046\007\044\014\050\015\054\016\043\032\130\033\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\046\007\044\014\050" +
    "\015\054\016\043\032\100\033\101\001\001\000\016\005" +
    "\046\007\044\014\050\015\054\016\043\033\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\020\004" +
    "\037\005\024\021\016\023\035\025\023\026\026\001\001" +
    "\000\002\001\001\000\020\003\020\004\041\005\024\021" +
    "\016\023\035\025\023\026\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\046\007\044\014\057\015\054\016\043\001\001\000\002" +
    "\001\001\000\010\005\046\007\044\016\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\046\007\044" +
    "\015\062\016\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\046\007\044\014\050\015\054\016\043" +
    "\033\070\001\001\000\016\005\046\007\044\014\050\015" +
    "\054\016\043\033\067\001\001\000\020\003\020\004\066" +
    "\005\024\021\016\023\035\025\023\026\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\046\006\073\007\072\013\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\046\006\077\007\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\103" +
    "\001\001\000\002\001\001\000\006\005\046\007\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\020\004\112\005\024\021" +
    "\016\023\035\025\023\026\026\001\001\000\004\024\113" +
    "\001\001\000\002\001\001\000\020\003\020\004\115\005" +
    "\024\021\016\023\035\025\023\026\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\123\001\001\000\002" +
    "\001\001\000\016\005\046\007\044\014\050\015\054\016" +
    "\043\033\125\001\001\000\002\001\001\000\020\003\020" +
    "\004\127\005\024\021\016\023\035\025\023\026\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\020" +
    "\004\132\005\024\021\016\023\035\025\023\026\026\001" +
    "\001\000\004\022\135\001\001\000\020\005\046\007\044" +
    "\014\050\015\054\016\043\032\141\033\101\001\001\000" +
    "\020\003\020\004\140\005\024\021\016\023\035\025\023" +
    "\026\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\020\004\143\005\024\021\016\023\035\025\023\026" +
    "\026\001\001\000\004\022\144\001\001\000\002\001\001" +
    "\000\020\003\020\004\146\005\024\021\016\023\035\025" +
    "\023\026\026\001\001\000\002\001\001\000\020\003\020" +
    "\004\150\005\024\021\016\023\035\025\023\026\026\001" +
    "\001\000\002\001\001\000\012\005\046\006\073\007\072" +
    "\013\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\046\007\044" +
    "\014\050\015\054\016\043\033\157\001\001\000\020\003" +
    "\020\004\160\005\024\021\016\023\035\025\023\026\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\020\004\164\005\024\021\016\023\035" +
    "\025\023\026\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\020\004\167\005\024\021\016\023\035" +
    "\025\023\026\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\020\004\173\005\024" +
    "\021\016\023\035\025\023\026\026\001\001\000\002\001" +
    "\001\000\004\027\175\001\001\000\002\001\001\000\010" +
    "\017\202\020\201\030\177\001\001\000\010\017\224\020" +
    "\201\030\177\001\001\000\002\001\001\000\010\017\204" +
    "\020\201\030\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\223\001\001\000\004" +
    "\012\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\046\007\044\014\050\015\054\016\043\033\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\230\001\001\000\006\010\233\030\010\001\001\000" +
    "\002\001\001\000\006\010\232\030\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\020\004\235\005" +
    "\024\021\016\023\035\025\023\026\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\241\001\001\000\004\031\242\001\001\000\002\001\001" +
    "\000\006\010\244\030\010\001\001\000\002\001\001\000" +
    "\004\012\212\001\001\000\006\010\247\030\010\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public void report_error(String message,Object info){
        System.out.println(message);
        System.out.println(info);
  }
    protected int error_sync_size () {
      System.out.println(":error_sync_size was called.");
      return 1;
    }
    public void syntax_error(Symbol cur_token){
        report_error("Syntax error", null);
        System.out.println("Token Value " + cur_token.value);
        System.out.println("Sym " + cur_token.sym);
        System.out.println("Line " + cur_token.left);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // function_call ::= PUT OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // function_call ::= ID OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // for ::= FOR asignation TO expression statement END FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // while ::= WHILE condition LOOP statement END LOOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // case_a ::= END CASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_a",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // case_a ::= WHEN OTHERS CASEASIG statement END CASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_a",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // case_a ::= WHEN primary CASEASIG statement case_a 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_a",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // case ::= CASE condition IS case_a 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // if_a ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // if_a ::= ELSE statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // if_a ::= ELSEIF condition THEN statement if_a 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_a",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // if ::= IF condition THEN statement if_a END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parameters ::= list_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list_variable ::= primary 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list_variable ::= primary COMMA list_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // asignation ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // asignation ::= ID ASIGNATION expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // primary ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // primary ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // primary ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // primary ::= LITERAL_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // primary ::= LITERAL_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= mathematical_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression RELATION_OPERATOR expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression CONDITION_ELEMENT expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parenthesis_operation ::= primary 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parenthesis_operation ::= OPEN_PARENTHESIS mathematical_expression CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parenthesis_operation",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mult_operation ::= parenthesis_operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_operation",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // mult_operation ::= mult_operation MULT_OPERATOR parenthesis_operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult_operation",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mathematical_expression ::= mult_operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathematical_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mathematical_expression ::= mathematical_expression SUM_OPERATOR mult_operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathematical_expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simple_expression ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condition ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= function_call END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= RETURN expression END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= for END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= while END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= case END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= if END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= NEW_LINE END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= asignation END_INSTRUCTION statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // constant ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // constant ::= CONSTANT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // body_declaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_declaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // body_declaration ::= IS declaration BEGIN statement END ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_declaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // simple_declaration ::= ID DECLARATION constant TYPE ASIGNATION expression END_INSTRUCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // simple_declaration ::= ID COMMA simple_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simple_declaration ::= ID DECLARATION constant TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // in_out_declaration ::= ID DECLARATION IN OUT TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // in_out_declaration ::= ID DECLARATION OUT TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // in_out_declaration ::= ID DECLARATION IN TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_out_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list_declaration_parameters ::= in_out_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_declaration_parameters ::= simple_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list_declaration_parameters ::= in_out_declaration list_declaration_parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list_declaration_parameters ::= simple_declaration list_declaration_parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaration_parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parameters_declaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parameters_declaration ::= OPEN_PARENTHESIS list_declaration_parameters CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= FUNCTION ID parameters_declaration RETURN TYPE body_declaration END_INSTRUCTION declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= PROCEDURE ID parameters_declaration body_declaration END_INSTRUCTION declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration ::= simple_declaration END_INSTRUCTION declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // procedure ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= procedure EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // procedure ::= PROCEDURE ID IS declaration BEGIN statement END ID END_INSTRUCTION procedure 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

